{"target_folder":"1145","files":[{"path":"\\__ns-uploader-manifest__.json","type":"application/json","contents":"{\"DeployDistribution\\\\Trevera\\\\Layout@1.0.0\\\\manifest.json\":\"\",\"DeployDistribution\\\\Trevera\\\\Layout@1.0.0\\\\Modules\\\\NamedAnchors\\\\README.md\":\"c5212ffbb250f7b483d1ed636b86f4a8\",\"DeployDistribution\\\\Trevera\\\\Layout@1.0.0\\\\Modules\\\\Extension\\\\Configuration\\\\CreditLock.json\":\"6abeff7eca5d9d34c9827624593fbf8f\",\"DeployDistribution\\\\Trevera\\\\Layout@1.0.0\\\\Modules\\\\Extension\\\\Configuration\\\\CreateQuoteMenuItem.json\":\"34c8e26c7585cfa55df6df0b36a12320\",\"DeployDistribution\\\\Trevera\\\\Layout@1.0.0\\\\Modules\\\\Extension\\\\Configuration\\\\Extension.json\":\"93490c449b2aeb74bb171409403ca75b\",\"DeployDistribution\\\\Trevera\\\\Layout@1.0.0\\\\Modules\\\\Extension\\\\Configuration\\\\Fix.CartConfiguration.json\":\"f5c61a4324500422a3bb024d9027551e\",\"DeployDistribution\\\\Trevera\\\\Layout@1.0.0\\\\Modules\\\\Extension\\\\Configuration\\\\Fix.Home.Configuration.json\":\"cd4cac7a551e7475b5598aa8d83bfb73\",\"DeployDistribution\\\\Trevera\\\\Layout@1.0.0\\\\Modules\\\\Extension\\\\Configuration\\\\Fix.MoveNavigation.Configuration.json\":\"3cff1e5f32053cf874081bbf62d41104\",\"DeployDistribution\\\\Trevera\\\\Layout@1.0.0\\\\Modules\\\\Extension\\\\Configuration\\\\QuickOrderMenuItem.json\":\"2cb8c1dcea3d335624a3ef43398493dc\",\"DeployDistribution\\\\Trevera\\\\Layout@1.0.0\\\\Modules\\\\Extension\\\\JavaScript\\\\Trevera.Layout.Checkout.Extension.js\":\"3b7208f3a44e765201a837cd349c10ad\",\"DeployDistribution\\\\Trevera\\\\Layout@1.0.0\\\\Modules\\\\Extension\\\\JavaScript\\\\Trevera.Layout.MyAccount.Extension.js\":\"44e79c073cb43a0994c84775a725c779\",\"DeployDistribution\\\\Trevera\\\\Layout@1.0.0\\\\Modules\\\\Extension\\\\JavaScript\\\\Trevera.Layout.Shopping.Extension.js\":\"b124edd1bd0534322e05222ae0a09678\",\"DeployDistribution\\\\Trevera\\\\Layout@1.0.0\\\\Modules\\\\Extension\\\\Sass\\\\_layout-extension.scss\":\"49465f03d472244e35d41611d02c100d\",\"DeployDistribution\\\\Trevera\\\\Layout@1.0.0\\\\Modules\\\\Header\\\\Configuration\\\\Header.Custom.json\":\"f40a5bfd92d7e52832a096bc957d4ce5\",\"DeployDistribution\\\\Trevera\\\\Layout@1.0.0\\\\Modules\\\\Header\\\\Sass\\\\_header-custom.scss\":\"3887da8f09a8184615ac030ed33d2092\",\"DeployDistribution\\\\Trevera\\\\Layout@1.0.0\\\\Modules\\\\Header\\\\Sass\\\\_layout-header.scss\":\"83b883c633b439575e6eb8eed751da35\",\"DeployDistribution\\\\Trevera\\\\Layout@1.0.0\\\\Modules\\\\Header\\\\Sass\\\\_my-account-menu.scss\":\"d41d8cd98f00b204e9800998ecf8427e\",\"DeployDistribution\\\\Trevera\\\\Layout@1.0.0\\\\Modules\\\\Header\\\\JavaScript\\\\Trevera.CategoryHelpers.js\":\"8b6236a419d77926f3f7a2e57a301f82\",\"DeployDistribution\\\\Trevera\\\\Layout@1.0.0\\\\Modules\\\\Header\\\\JavaScript\\\\Trevera.Layout.Header.js\":\"35b14716e362f60f526d06c9a27932c6\",\"DeployDistribution\\\\Trevera\\\\Layout@1.0.0\\\\Modules\\\\Header\\\\Templates\\\\sc_header_menu.tpl\":\"4c0f08137fc50ee154dad4caaedbdd18\",\"DeployDistribution\\\\Trevera\\\\Layout@1.0.0\\\\Modules\\\\Header\\\\Templates\\\\sc_header.tpl\":\"fe572ecf7c2c832d68b2e320addd7f9f\",\"DeployDistribution\\\\Trevera\\\\Layout@1.0.0\\\\Modules\\\\Header\\\\Templates\\\\sc_site_search.tpl\":\"831308f5715eec40e51e3ab67ae6a86b\",\"DeployDistribution\\\\Trevera\\\\Layout@1.0.0\\\\Modules\\\\NamedAnchors\\\\JavaScript\\\\Trevera.NamedAnchors.Extension.js\":\"39e5e9b242600180cc4c8214dbed5ee9\",\"DeployDistribution\\\\Trevera\\\\GoogleFontLoader@1.0.0\\\\manifest.json\":\"\",\"DeployDistribution\\\\Trevera\\\\GoogleFontLoader@1.0.0\\\\README.md\":\"e77ea8f4d889fcdc1ee5639e2f6b9ad1\",\"DeployDistribution\\\\Trevera\\\\GoogleFontLoader@1.0.0\\\\Modules\\\\Extension\\\\Configuration\\\\GoogleFontLoader.json\":\"2a29767e603f333777c9f63247741460\",\"DeployDistribution\\\\Trevera\\\\GoogleFontLoader@1.0.0\\\\Modules\\\\Extension\\\\JavaScript\\\\Trevera.GoogleFontLoader.Extension.js\":\"d443e2a4b87c53df45a37367505989bc\",\"DeployDistribution\\\\Trevera\\\\GoogleFontLoader@1.0.0\\\\Modules\\\\Extension\\\\JavaScript\\\\webfontloader.custom.js\":\"6a22c1855983f4725aa8bbe159a92f87\",\"DeployDistribution\\\\Trevera\\\\Products@1.0.1\\\\manifest.json\":\"\",\"DeployDistribution\\\\Trevera\\\\Products@1.0.1\\\\Modules\\\\Extension\\\\Configuration\\\\Extension.json\":\"a4486b749e630a9531825e55ae273d2d\",\"DeployDistribution\\\\Trevera\\\\Products@1.0.1\\\\Modules\\\\Extension\\\\Configuration\\\\Facets.Extension.json\":\"342b967f930d1ed914c1c5ba9e78c32a\",\"DeployDistribution\\\\Trevera\\\\Products@1.0.1\\\\Modules\\\\Extension\\\\Configuration\\\\Fix.CartConfiguration.json\":\"f5c61a4324500422a3bb024d9027551e\",\"DeployDistribution\\\\Trevera\\\\Products@1.0.1\\\\Modules\\\\Extension\\\\Configuration\\\\Fix.MoveNavigation.Configuration.json\":\"3cff1e5f32053cf874081bbf62d41104\",\"DeployDistribution\\\\Trevera\\\\Products@1.0.1\\\\Modules\\\\Extension\\\\Configuration\\\\Fix.Home.Configuration.json\":\"cd4cac7a551e7475b5598aa8d83bfb73\",\"DeployDistribution\\\\Trevera\\\\Products@1.0.1\\\\Modules\\\\Extension\\\\Configuration\\\\Move.ProductDetails.json\":\"3054d75b9851e07fab94108d4c947df4\",\"DeployDistribution\\\\Trevera\\\\Products@1.0.1\\\\Modules\\\\Extension\\\\Configuration\\\\SearchPage.Controls.json\":\"6000baeadb7ff0ac7036e3119b157301\",\"DeployDistribution\\\\Trevera\\\\Products@1.0.1\\\\Modules\\\\Extension\\\\Configuration\\\\PDP.json\":\"1208dcc63db8ed9c7570c256fb5626ca\",\"DeployDistribution\\\\Trevera\\\\Products@1.0.1\\\\Modules\\\\Extension\\\\Sass\\\\_products-extension.scss\":\"d3124ae89875964e11c9aa43f50c81e2\",\"DeployDistribution\\\\Trevera\\\\Products@1.0.1\\\\Modules\\\\Extension\\\\JavaScript\\\\Trevera.AddToCart.Message.View.js\":\"ba3af1a790eda8b70a42946598b5609a\",\"DeployDistribution\\\\Trevera\\\\Products@1.0.1\\\\Modules\\\\Extension\\\\JavaScript\\\\Trevera.Facets.Extension.js\":\"f2502456badd3848b9639c1928bc1e77\",\"DeployDistribution\\\\Trevera\\\\Products@1.0.1\\\\Modules\\\\Extension\\\\JavaScript\\\\Trevera.PLP.Extension.js\":\"baf9e4d7e576ad09fcc5cc6f32854bab\",\"DeployDistribution\\\\Trevera\\\\Products@1.0.1\\\\Modules\\\\Extension\\\\JavaScript\\\\Trevera.PDP.Helpers.js\":\"38a1300299715d9942ce3cc3b1d55a78\",\"DeployDistribution\\\\Trevera\\\\Products@1.0.1\\\\Modules\\\\Extension\\\\JavaScript\\\\Trevera.ProductDetails.Information.View.Extension.js\":\"1b35161937c510149ad0cb80ca7bcd6a\",\"DeployDistribution\\\\Trevera\\\\Products@1.0.1\\\\Modules\\\\Extension\\\\JavaScript\\\\Trevera.ProductDetails.Slider.Extension.js\":\"58614b2afb8b4654cb6eca974beb6c42\",\"DeployDistribution\\\\Trevera\\\\Products@1.0.1\\\\Modules\\\\Extension\\\\JavaScript\\\\Trevera.ProductDetails.js\":\"b93752d2145db8b42a36cc27380e8365\",\"DeployDistribution\\\\Trevera\\\\Products@1.0.1\\\\Modules\\\\Extension\\\\JavaScript\\\\Trevera.Products.Extension.js\":\"c3b334de7db2c09e667bd20dd49a4c38\",\"DeployDistribution\\\\Trevera\\\\Products@1.0.1\\\\Modules\\\\Extension\\\\JavaScript\\\\Trevera.Products.Shopping.Extension.js\":\"640e6c2cec264306fc35eea405f00468\",\"DeployDistribution\\\\Trevera\\\\Products@1.0.1\\\\Modules\\\\Extension\\\\Templates\\\\add_to_cart_confirm_message.tpl\":\"9072ff9dbec51db8fc48b635a586606c\",\"DeployDistribution\\\\Trevera\\\\Products@1.0.1\\\\Modules\\\\Extension\\\\Templates\\\\product_details_image_gallery_video_support.tpl\":\"305714127ec453a6918bcfecd3de2e08\",\"DeployDistribution\\\\Trevera\\\\Products@1.0.1\\\\Modules\\\\ProductDetailsAttributes\\\\Configuration\\\\ProductDetails.Attributes.json\":\"d2fbd0a5cbc593dd9b4474415d26c3aa\",\"DeployDistribution\\\\Trevera\\\\Products@1.0.1\\\\Modules\\\\ProductDetailsAttributes\\\\JavaScript\\\\HITC.ProductDetailsAttributes.Extension.js\":\"fb78238a51ba3c2be0a44360f8fd1195\",\"DeployDistribution\\\\Trevera\\\\Products@1.0.1\\\\Modules\\\\ProductDetailsAttributes\\\\JavaScript\\\\ProductDetailsAttributes.View.js\":\"4b2e05d8afb01a2d4fd11d8c9661ddbc\",\"DeployDistribution\\\\Trevera\\\\Products@1.0.1\\\\Modules\\\\ProductDetailsAttributes\\\\Sass\\\\_productdetailsattributes-extension.scss\":\"513437c695bf20d2bec874c7a590d9bf\",\"DeployDistribution\\\\Trevera\\\\Products@1.0.1\\\\Modules\\\\ProductDetailsAttributes\\\\Templates\\\\trv_productdetailsattributes_extension.tpl\":\"d9d4ad7d884bcc8eccfc05843ed61126\",\"DeployDistribution\\\\Trevera\\\\TreveraLiveChat@1.0.0\\\\manifest.json\":\"\",\"DeployDistribution\\\\Trevera\\\\TreveraLiveChat@1.0.0\\\\Modules\\\\Extension\\\\Configuration\\\\LiveChat.json\":\"085d8f122d45f589dcd1b6538f4abdb6\",\"DeployDistribution\\\\Trevera\\\\TreveraLiveChat@1.0.0\\\\Modules\\\\Extension\\\\JavaScript\\\\Trevera.LiveChat.js\":\"eaa9e002f71cf58a9a6ff3412b1bbbfe\",\"DeployDistribution\\\\Trevera\\\\TreveraLiveChat@1.0.0\\\\Modules\\\\Extension\\\\Sass\\\\_livechat.scss\":\"64e4ddff09e5f0ddfe48651c51afe4fc\",\"DeployDistribution\\\\Trevera\\\\TreveraPromotions@1.0.0\\\\manifest.json\":\"\",\"DeployDistribution\\\\Trevera\\\\TreveraPromotions@1.0.0\\\\Modules\\\\Extension\\\\JavaScript\\\\Promotions.Extension.js\":\"d671bc9277d0e730c755f57b90dd4c21\",\"DeployDistribution\\\\Trevera\\\\TreveraPromotions@1.0.0\\\\Modules\\\\Extension\\\\JavaScript\\\\Promotions.Extension.SS2Model.js\":\"437e1f61d1de52dd4b921892b1ec89a3\",\"DeployDistribution\\\\Trevera\\\\TreveraPromotions@1.0.0\\\\Modules\\\\Extension\\\\JavaScript\\\\Promotions.Extension.View.js\":\"7a62c01dafafb5b74c720296a47997e4\",\"DeployDistribution\\\\Trevera\\\\TreveraPromotions@1.0.0\\\\Modules\\\\Extension\\\\JavaScript\\\\Promotions.Helpers.js\":\"e27187084e22b414859132ffc43b9a32\",\"DeployDistribution\\\\Trevera\\\\TreveraPromotions@1.0.0\\\\Modules\\\\Extension\\\\SuiteScript\\\\LiveOrder.Model.TrvPromotions.js\":\"a1a108c2af442ab89a42f5cea48f4d48\",\"DeployDistribution\\\\Trevera\\\\TreveraPromotions@1.0.0\\\\Modules\\\\Extension\\\\SuiteScript\\\\TrvPromotions.ServiceController.js\":\"968a9f10ab810375b14a329cf8dfc901\",\"DeployDistribution\\\\Trevera\\\\TreveraPromotions@1.0.0\\\\Modules\\\\Extension\\\\Sass\\\\_promotions-extension.scss\":\"680fb141949a1a46bfcfc18972f6c472\",\"DeployDistribution\\\\Trevera\\\\TreveraPromotions@1.0.0\\\\Modules\\\\Extension\\\\SuiteScript2\\\\Promotions.Extension.Model.js\":\"7cbaefc986e892410ddc5cc4edd23d87\",\"DeployDistribution\\\\Trevera\\\\TreveraPromotions@1.0.0\\\\Modules\\\\Extension\\\\SuiteScript2\\\\Promotions.Extension.Service.ss\":\"e42580045d1c468bfa28a76e0ad94483\",\"DeployDistribution\\\\Trevera\\\\TreveraPromotions@1.0.0\\\\Modules\\\\Extension\\\\Templates\\\\trevera_promotions_extension.tpl\":\"3d4795e969ffc05d6263e05ba652d12c\"}"},{"path":"\\Trevera\\TreveraPromotions@1.0.0\\manifest.json","type":"application/json","contents":"{\n    \"name\": \"TreveraPromotions\",\n    \"fantasyName\": \"Promotions Support\",\n    \"vendor\": \"Trevera\",\n    \"type\": \"extension\",\n    \"target\": \"SCA,SCS\",\n    \"target_version\": {\n        \"SCA\": \">=21.1.0\",\n        \"SCS\": \">=21.1.0\"\n    },\n    \"version\": \"1.0.0\",\n    \"description\": \"Support for custom promotions, Cleaning Kits\",\n    \"assets\": {\n        \"img\": {\n            \"files\": []\n        },\n        \"fonts\": {\n            \"files\": []\n        }\n    },\n    \"templates\": {\n        \"application\": {\n            \"shopping\": {\n                \"files\": [\n                    \"Modules/Extension/Templates/trevera_promotions_extension.tpl\"\n                ]\n            },\n            \"myaccount\": {\n                \"files\": [\n                    \"Modules/Extension/Templates/trevera_promotions_extension.tpl\"\n                ]\n            },\n            \"checkout\": {\n                \"files\": [\n                    \"Modules/Extension/Templates/trevera_promotions_extension.tpl\"\n                ]\n            }\n        }\n    },\n    \"sass\": {\n        \"entry_points\": {\n            \"shopping\": \"Modules/Extension/Sass/_promotions-extension.scss\",\n            \"myaccount\": \"Modules/Extension/Sass/_promotions-extension.scss\",\n            \"checkout\": \"Modules/Extension/Sass/_promotions-extension.scss\"\n        },\n        \"files\": [\n            \"Modules/Extension/Sass/_promotions-extension.scss\"\n        ]\n    },\n    \"javascript\": {\n        \"entry_points\": {\n            \"shopping\": \"Modules/Extension/JavaScript/Promotions.Extension.js\",\n            \"myaccount\": \"Modules/Extension/JavaScript/Promotions.Extension.js\",\n            \"checkout\": \"Modules/Extension/JavaScript/Promotions.Extension.js\"\n        },\n        \"application\": {\n            \"shopping\": {\n                \"files\": [\n                    \"Modules/Extension/JavaScript/Promotions.Extension.js\",\n                    \"Modules/Extension/JavaScript/Promotions.Extension.SS2Model.js\",\n                    \"Modules/Extension/JavaScript/Promotions.Extension.View.js\",\n                    \"Modules/Extension/JavaScript/Promotions.Helpers.js\"\n                ]\n            },\n            \"myaccount\": {\n                \"files\": [\n                    \"Modules/Extension/JavaScript/Promotions.Extension.js\",\n                    \"Modules/Extension/JavaScript/Promotions.Extension.SS2Model.js\",\n                    \"Modules/Extension/JavaScript/Promotions.Extension.View.js\",\n                    \"Modules/Extension/JavaScript/Promotions.Helpers.js\"\n                ]\n            },\n            \"checkout\": {\n                \"files\": [\n                    \"Modules/Extension/JavaScript/Promotions.Extension.js\",\n                    \"Modules/Extension/JavaScript/Promotions.Extension.SS2Model.js\",\n                    \"Modules/Extension/JavaScript/Promotions.Extension.View.js\",\n                    \"Modules/Extension/JavaScript/Promotions.Helpers.js\"\n                ]\n            }\n        }\n    },\n    \"ssp-libraries\": {\n        \"entry_point\": \"Modules/Extension/SuiteScript/LiveOrder.Model.TrvPromotions.js\",\n        \"files\": [\n            \"Modules/Extension/SuiteScript/LiveOrder.Model.TrvPromotions.js\",\n            \"Modules/Extension/SuiteScript/TrvPromotions.ServiceController.js\"\n        ]\n    },\n    \"suitescript2\": {\n        \"files\": [\n            \"Modules/Extension/SuiteScript2/Promotions.Extension.Model.js\",\n            \"Modules/Extension/SuiteScript2/Promotions.Extension.Service.ss\"\n        ]\n    }\n}"},{"path":"\\Trevera\\TreveraPromotions@1.0.0\\Modules\\Extension\\JavaScript\\Promotions.Extension.js","type":"application/javascript","contents":"define(\r\n  'Promotions.Extension'\r\n  , [\r\n    'Promotions.Extension.View',\r\n    'Promotions.Extension.SS2Model',\r\n    'Promotions.Helpers',\r\n    'underscore'\r\n  ]\r\n  , function (\r\n    ExtensionView,\r\n    PromotionsModel,\r\n    Helpers,\r\n    _\r\n  ) {\r\n    'use strict';\r\n\r\n    return {\r\n      mountToApp: function mountToApp(container) {\r\n        var PAGETYPE      = container.getComponent(\"PageType\");\r\n        var MYACCOUNTMENU = container.getComponent(\"MyAccountMenu\");\r\n        var ENVIRONMENT   = container.getComponent(\"Environment\");\r\n        this.CART         = container.getComponent(\"Cart\");\r\n        this.PROFILE      = container.getComponent(\"UserProfile\");\r\n        this.LAYOUT       = container.getComponent(\"Layout\");\r\n        var config        = {};\r\n\r\n        var self            = this;\r\n        this.lines          = []\r\n        this.triggeringLine = 0;\r\n        this.promotions     = {};\r\n        this.setPromotions(container);\r\n\r\n        if (this.CART) {\r\n          this.CART.on('afterUpdateLine', function (line) {\r\n            console.log('afterUpdateLine', line);\r\n            if (self.triggeringLine == line.line.internalid) return;\r\n            self.triggeringLine = line.line.internalid;\r\n            self.refreshLineData(self.CART);\r\n          })\r\n\r\n          this.CART.on('afterRemoveLine', function (line) {\r\n            console.log('afterRemoveLine', line);\r\n            self.refreshLineData(self.CART);\r\n          })\r\n\r\n          this.CART.on('afterAddLine', function (line) {\r\n            self.CART.getLatestAddition().then(function (newline) {\r\n              if (newline.internalid == line.result) {\r\n                if (!Helpers.isPromotionLine(line)) {\r\n                  console.log('new line added was promotion')\r\n                }\r\n              }\r\n            })\r\n          });\r\n\r\n          self.LAYOUT.addToViewEventsDefinition(\r\n            'Cart.Lines.View',\r\n            'click [data-action=\"remove-promotion-item\"]',\r\n            function (evt) {\r\n              var $target = jQuery(evt.currentTarget);\r\n              var lineID  = $target.data('internalid');\r\n              self.CART.removeLine({\r\n                line_id: lineID\r\n              }).then(function () {\r\n                //todo: handle auto apply?\r\n              });\r\n            });\r\n\r\n          var self = this;\r\n          this.CART.addToViewEventsDefinition(\r\n            'Cart.PromocodeForm.View',\r\n            'submit [data-action=\"apply-promocode-custom\"]',\r\n            function (event) {\r\n              event.preventDefault();\r\n              event.stopPropagation();\r\n              var promoObj = jQuery('form[data-action=\"apply-promocode-custom\"]').serializeObject();\r\n              self.CART.addPromotion(promoObj).then(function (promotion) {\r\n                jQuery('#order-wizard-promocode').collapse('hide')\r\n                console.log('added successfully', promotion);\r\n              }, function (jqXhr) {\r\n                if (self.promotions && Helpers.isPromotionCustom(self.promotions.get('promotions'), promoObj.promocode)) {\r\n                  window.location.reload();\r\n                }\r\n                else {\r\n                  self.showErrorMessageForPromoCode(jqXhr)\r\n                }\r\n              });\r\n\r\n              return false;\r\n            }\r\n          )\r\n        }\r\n\r\n        try {\r\n          PAGETYPE.registerPageType({\r\n            name           : 'trevera_cleaningkits',\r\n            routes         : ['cleaningkits', 'cleaningkits/?:options', 'cleaningkitsadded'],\r\n            view           : ExtensionView,\r\n            options        : {\r\n              application: container\r\n            },\r\n            defaultTemplate: {\r\n              name       : 'trevera_myaccount_cleaningkits.tpl',\r\n              displayName: 'Cleaning Kits'\r\n            }\r\n          });\r\n        } catch (e) {\r\n          console.log(e)\r\n        }\r\n\r\n        this.addViewContextVariables(container);\r\n      },\r\n\r\n      setPromotions: function setPromotions(container) {\r\n        var self    = this;\r\n        var PROFILE = container.getComponent(\"UserProfile\");\r\n        var LAYOUT  = container.getComponent(\"Layout\");\r\n        PROFILE.getUserProfile().then(function (profile) {\r\n          if (profile.isloggedin) {\r\n            PromotionsModel.getPromise({user: profile.internalid}).done(function promotionsDataLoaded() {\r\n              self.promotions = PromotionsModel.getInstance();\r\n              // trigger event to refresh interface\r\n              LAYOUT.cancelableTrigger('promotionsDataLoaded');\r\n              return jQuery.Deferred().resolve()\r\n            });\r\n          }\r\n        });\r\n      },\r\n\r\n      refreshLineData: function (CART) {\r\n        var self = this;\r\n        CART.getLines().then(function (cartLines) {\r\n          self.lines = cartLines;\r\n        });\r\n      },\r\n\r\n      showErrorMessageForPromoCode: function showErrorMessageForPromoCode(jqXhr) {\r\n        var self = this;\r\n        console.log(\"Could not add promotion.\");\r\n        var current_key;\r\n        var message  = 'Problem Adding Promotion';\r\n        var response = JSON.parse(jqXhr.responseText);\r\n        if (response) {\r\n          message = response.errorMessage;\r\n        }\r\n\r\n        setTimeout(function () {\r\n          self.LAYOUT.showMessage({\r\n            message : message,\r\n            type    : 'error',\r\n            selector: 'promocode-error-placeholder'\r\n          }, 100);\r\n        })\r\n      },\r\n\r\n      checkForPromotionInCart: function (callee, lines, promotions, promotion) {\r\n        var isLineAddedToOrder = Helpers.checkIfPromotionInOrder(lines, promotion);\r\n        console.log('checkForPromotionInCart', isLineAddedToOrder);\r\n      },\r\n\r\n      addViewContextVariables: function addViewContextVariables(container) {\r\n        var LAYOUT = container.getComponent(\"Layout\");\r\n\r\n        if (LAYOUT) {\r\n          LAYOUT.addToViewContextDefinition(\r\n            'Cart.Lines.View'\r\n            , 'trvExtras'\r\n            , 'string'\r\n            , function trvExtras(context) {\r\n              var options        = context.line && context.line.options;\r\n              var ctx            = {isPromoLine: false, showControls: true};\r\n              var promotionsData = PromotionsModel.getInstance();\r\n              console.log('promotionsData', promotionsData)\r\n              if (_.size(options) > 0) {\r\n                var promotionField = _.findWhere(options, {cartOptionId: 'custcol_custom_promotion_used'});\r\n                if (promotionField && promotionField.value) {\r\n                  var matchingPromotion = _.find(promotionsData.get('promotions'), {promocode: promotionField.value.internalid})\r\n                  console.log('cart lines logic: ', promotionField, matchingPromotion);\r\n                  if (promotionField.value) {\r\n                    _.extend(ctx, {\r\n                      isPromoLine    : true,\r\n                      showControls   : false,\r\n                      showRemove     : !!matchingPromotion ? !matchingPromotion.autoApply : true,\r\n                      promocodeToShow: promotionField.value.internalid\r\n                    })\r\n                  }\r\n                }\r\n              }\r\n              return ctx\r\n            }\r\n          );\r\n\r\n          LAYOUT.addToViewContextDefinition(\r\n            'Cart.Item.Summary.View'\r\n            , 'trvExtras'\r\n            , 'string'\r\n            , function trvExtras(context) {\r\n              var options = context.line && context.line.options;\r\n              var ctx     = {\r\n                isPromoLine : false,\r\n                showControls: true\r\n              };\r\n              if (_.size(options) > 0) {\r\n                var promotionField = _.findWhere(options, {cartOptionId: 'custcol_custom_promotion_used'});\r\n                if (promotionField) {\r\n                  if (promotionField.value) {\r\n                    console.log('promotionField: updating');\r\n                    _.extend(ctx, {\r\n                      isPromoLine    : true,\r\n                      showControls   : false,\r\n                      promocodeToShow: promotionField.value.internalid\r\n                    })\r\n                  }\r\n                }\r\n              }\r\n              return ctx\r\n            }\r\n          );\r\n        }\r\n      }\r\n\r\n    };\r\n  });\r\n"},{"path":"\\Trevera\\TreveraPromotions@1.0.0\\Modules\\Extension\\JavaScript\\Promotions.Extension.SS2Model.js","type":"application/javascript","contents":"// Model.js\r\n// -----------------------\r\n// @module Case\r\ndefine(\"Promotions.Extension.SS2Model\"\r\n  , [\r\n    \"Singleton\",\r\n    \"Backbone\",\r\n    \"Utils\",\r\n    \"underscore\"\r\n  ]\r\n  , function (\r\n    Singleton,\r\n    Backbone,\r\n    Utils,\r\n    _\r\n  ) {\r\n    \"use strict\";\r\n\r\n    var classProperties = _.extend({\r\n      getPromise: function (requestArgs) {\r\n        console.log('getPromise', requestArgs)\r\n        var self = this;\r\n\r\n        if (_.result(SC, 'isPageGenerator')) {\r\n          return jQuery.Deferred().resolve();\r\n        }\r\n\r\n        var model_instance = this.getInstance();\r\n\r\n        /*if (this.resetPromiseForReload()) {\r\n          model_instance.modelLoad = null;\r\n        }*/\r\n\r\n        if (model_instance.modelLoad) {\r\n          if (model_instance.isLoading) {\r\n            model_instance.isLoading = false;\r\n          }\r\n        }\r\n        else {\r\n          model_instance.modelLoad = jQuery.Deferred();\r\n          model_instance.fetch({data: requestArgs}).done(function (resp) {\r\n            model_instance.set('promotions', resp.promotions);\r\n            model_instance.set('redemptions', resp.redemptions);\r\n            model_instance.trigger('change:promotions', model_instance, (model_instance.attributes && model_instance.attributes.promotions) || {});\r\n            model_instance.modelLoad.resolve.apply(this, arguments);\r\n          }).fail(function () {\r\n            model_instance.modelLoad.reject.apply(this, arguments);\r\n          }).always(function () {\r\n            if (model_instance.isLoading) {\r\n              model_instance.isLoading = false;\r\n            }\r\n          });\r\n        }\r\n\r\n        return model_instance.modelLoad;\r\n      }\r\n    }, Singleton);\r\n\r\n    // @class Case.Fields.Model @extends Backbone.Model\r\n    return Backbone.CachedModel.extend({\r\n      //@property {String} urlRoot\r\n      urlRoot: Utils.getAbsoluteUrl(getExtensionAssetsPath(\"Modules/Extension/SuiteScript2/Promotions.Extension.Service.ss\"), true),\r\n\r\n      initialize: function (attributes, options) {\r\n        _.extend(this, attributes);\r\n        this.options = {};\r\n        this.set('options', {});\r\n\r\n        this.on('change:eligibility', function (model, eligibility) {\r\n          model.set('eligibility', eligibility, {silent: false});\r\n        });\r\n        this.trigger('change:eligibility', this, (attributes && attributes.eligibility) || '');\r\n\r\n        this.on('change:promotions', function (model, promotions) {\r\n          model.set('promotions', promotions, {silent: false});\r\n        });\r\n        this.trigger('change:promotions', this, (attributes && attributes.promotions) || {});\r\n\r\n        this.on('change:redemptions', function (model, redemptions) {\r\n          model.set('redemptions', redemptions, {silent: false});\r\n        });\r\n        this.trigger('change:redemptions', this, (attributes && attributes.redemptions) || {});\r\n\r\n        this.on('change:canClaim', function (model, canClaim) {\r\n          model.set('canClaim', canClaim, {silent: false});\r\n        });\r\n        this.trigger('change:canClaim', this, (attributes && attributes.canClaim) || false);\r\n      }\r\n    }\r\n    , classProperties);\r\n  });\r\n"},{"path":"\\Trevera\\TreveraPromotions@1.0.0\\Modules\\Extension\\JavaScript\\Promotions.Extension.View.js","type":"application/javascript","contents":"// @module Trevera.Promotions.Extension.View.js\r\ndefine('Promotions.Extension.View'\r\n  , [\r\n    'Backbone.View'\r\n    , 'trevera_promotions_extension.tpl'\r\n    , 'Promotions.Extension.SS2Model'\r\n    , 'Promotions.Helpers'\r\n  ]\r\n  , function (\r\n    BackboneView\r\n    , trevera_promotions_tpl\r\n    , PromotionsModel\r\n    , Helpers\r\n  ) {\r\n    'use strict';\r\n\r\n    return Backbone.View.extend({\r\n\r\n      template: trevera_promotions_tpl,\r\n\r\n      initialize: function initialize(options) {\r\n        this.model       = PromotionsModel.getInstance();\r\n        this.template    = trevera_promotions_tpl;\r\n        this.application = options.application;\r\n        this.LAYOUT      = options.application.getComponent('Layout');\r\n        this.CART        = options.application.getComponent('Cart');\r\n        this.PROFILE     = options.application.getComponent('UserProfile');\r\n        this.profile_model;\r\n\r\n        this.promocode = Helpers.getCleaningKitPromotion();\r\n\r\n        this.LAYOUT.on('promotionsDataLoaded', function (data) {\r\n          console.log('promotionsDataLoaded')\r\n        })\r\n\r\n        var self = this;\r\n\r\n      },\r\n\r\n      handleAddToCart: function (promoCode) {\r\n        var self = this;\r\n        self.application.getComponent('Cart').getLatestAddition().then(function (line) {\r\n          if (line) {\r\n            jQuery('[data-view=\"promocode-message-placeholder\"]').empty();\r\n            var isPromotionLine = Helpers.isPromotionLine(line);\r\n            if (!!isPromotionLine) {\r\n              var promotionField = _.findWhere(line.options, {cartOptionId: 'custcol_custom_promotion_used'});\r\n              if (promotionField && promotionField.value && promotionField.value.internalid == promoCode) {\r\n                Backbone.history.navigate('cart', {trigger: true, replace: true})\r\n                self.LAYOUT.showMessage({\r\n                  message  : 'Success! Your cleaning kit is in your <a href=\"/cart\">cart</a>.',\r\n                  type     : 'success',\r\n                  selector : 'promocode-message-placeholder',\r\n                  closeable: false\r\n                }, 100);\r\n              }\r\n              else {\r\n                self.LAYOUT.showMessage({\r\n                  message  : 'Looks like you\\'ve already claimed your cleaning kit for this month.',\r\n                  type     : 'warning',\r\n                  selector : 'promocode-message-placeholder',\r\n                  closeable: false\r\n                }, 100);\r\n              }\r\n            }\r\n            else {\r\n              self.LAYOUT.showMessage({\r\n                message  : 'Looks like you\\'ve already claimed your cleaning kit for this month.',\r\n                type     : 'warning',\r\n                selector : 'promocode-message-placeholder',\r\n                closeable: false\r\n              }, 100);\r\n            }\r\n          }\r\n          else {\r\n            self.LAYOUT.showMessage({\r\n              message  : 'Looks like you\\'ve already claimed your cleaning kit for this month.',\r\n              type     : 'warning',\r\n              selector : 'promocode-message-placeholder',\r\n              closeable: false\r\n            }, 100);\r\n          }\r\n        })\r\n      },\r\n\r\n      getPromotionsData: function () {\r\n        var self = this;\r\n        PromotionsModel.getPromise({user: this.profile_model.internalid}).done(function promotionsDataLoaded() {\r\n          self.model = PromotionsModel.getInstance();\r\n          jQuery('[data-view=\"promocode-message-placeholder\"]').empty();\r\n          if (self.model.get('promotions')) {\r\n            var promotion = _.find(self.model.get('promotions'), {'promocode': self.promocode});\r\n            if(promotion && promotion.redemption.canClaim) {\r\n              var lines = [];\r\n              lines.push({\r\n                item    : {\r\n                  internalid: 120 // cleaning kit\r\n                },\r\n                quantity: promotion.eligibility.numberWarranties - promotion.redemption.numberClaimed,\r\n                options : [{\r\n                  value       : {\r\n                    internalid: promotion.promocode\r\n                  },\r\n                  cartOptionId: 'custcol_custom_promotion_used',\r\n                  label       : 'Promotion Used'\r\n                }]\r\n              });\r\n\r\n              self.CART.addLines({lines: lines}).fail(function (resp) {\r\n                console.log(resp);\r\n                self.LAYOUT.showMessage({\r\n                  message  : 'Success! Your cleaning kit is in your <a href=\"/cart\">cart</a>.',\r\n                  type     : 'success',\r\n                  selector : 'promocode-message-placeholder',\r\n                  closeable: false\r\n                }, 100);\r\n              }).then(function (resp) {\r\n                console.log('success', resp);\r\n                if(resp.length > 0) {\r\n                  self.LAYOUT.showMessage({\r\n                    message  : 'Success! Your cleaning kit is in your <a href=\"/cart\">cart</a>.',\r\n                    type     : 'success',\r\n                    selector : 'promocode-message-placeholder',\r\n                    closeable: false\r\n                  }, 100);\r\n                }\r\n                else {\r\n                  self.LAYOUT.showMessage({\r\n                    message  : 'Looks like you\\'ve already claimed your cleaning kit for this month.',\r\n                    type     : 'warning',\r\n                    selector : 'promocode-message-placeholder',\r\n                    closeable: false\r\n                  }, 100);\r\n                }\r\n              });\r\n            }\r\n            else {\r\n              self.LAYOUT.showMessage({\r\n                message  : 'Looks like you\\'ve already claimed your cleaning kit for this month.',\r\n                type     : 'warning',\r\n                selector : 'promocode-message-placeholder',\r\n                closeable: false\r\n              }, 100);\r\n            }\r\n          }\r\n        });\r\n      },\r\n\r\n      beforeShowContent: function () {\r\n        var self    = this;\r\n        var promise = jQuery.Deferred();\r\n\r\n        this.PROFILE.getUserProfile().then(function (profile) {\r\n          self.profile_model = profile;\r\n          promise.resolve();\r\n          if (self.profile_model.isloggedin) {\r\n            self.getPromotionsData();\r\n          }\r\n        });\r\n\r\n        return promise;\r\n      },\r\n\r\n      getContext: function getContext() {\r\n        console.log('promotions', this.profile_model)\r\n        return {\r\n          isLoggedIn: this.profile_model && this.profile_model.isloggedin\r\n        }\r\n      }\r\n\r\n    });\r\n  });\r\n"},{"path":"\\Trevera\\TreveraPromotions@1.0.0\\Modules\\Extension\\JavaScript\\Promotions.Helpers.js","type":"application/javascript","contents":"define(\r\n  'Promotions.Helpers'\r\n  , [\r\n    'Promotions.Extension.SS2Model',\r\n    'underscore'\r\n  ]\r\n  , function (\r\n    PromotionsModel,\r\n    _\r\n  ) {\r\n    'use strict';\r\n\r\n    var monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    var monthAbbr  = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"];\r\n\r\n    return {\r\n      setPromotionsInCart: function () {\r\n        var self               = this;\r\n        var lines              = [];\r\n        var promotionsInCart   = self.getPromotionLines();\r\n        var eligiblePromotions = _.pluck(self.promotions.promotions, 'promocode');\r\n        var invalidLines       = [];\r\n        var linesWrongQuantity = [];\r\n        _.each(self.promotions.promotions, function (promo) {\r\n          var linesToUpdate = self.getInvalidPromotionLinesByPromotion(promo);\r\n          console.log(linesToUpdate);\r\n          if (linesToUpdate.linesToRemove.length > 0) {\r\n            invalidLines = invalidLines.concat(linesToUpdate.linesToRemove)\r\n          }\r\n          if (linesToUpdate.linesToUpdate.length > 0) {\r\n            linesWrongQuantity = linesWrongQuantity.concat(linesToUpdate.linesToUpdate)\r\n          }\r\n        })\r\n\r\n        if (invalidLines.length > 0) {\r\n          self.removePromotionsNotEligible(invalidLines)\r\n        }\r\n\r\n        if (linesWrongQuantity.length > 0) {\r\n          self.updateQuantityOnPromotionLines(linesWrongQuantity)\r\n        }\r\n\r\n        self.checkForRougeLines();\r\n\r\n        _.each(self.promotions.promotions, function (promotion) {\r\n          if (promotion.type === 1) {// cleaning kit\r\n            var lineAlreadyInCart = self.checkIfPromotionInOrder(self.lines, promotion);\r\n            if (!lineAlreadyInCart) {\r\n              lines.push({\r\n                item    : {\r\n                  internalid: 120 // cleaning kit\r\n                },\r\n                quantity: promotion.eligibility.numberWarranties,\r\n                options : [{\r\n                  value       : {\r\n                    internalid: promotion.promocode\r\n                  },\r\n                  cartOptionId: 'custcol_custom_promotion_used',\r\n                  label       : 'Promotion Used'\r\n                }]\r\n              })\r\n            }\r\n          }\r\n          else {\r\n            var givePromotion       = self.checkIfOrderQualifies(self.lines, promotion);\r\n            var promotionLineInCart = self.getValidPromotionLinesByPromotion(promotion);\r\n            if (givePromotion) {\r\n              for (var i = 0; i < promotion.itemsToAdd.items.length; i++) { //todo: support for pick from list\r\n                if (promotionLineInCart.length > 0) {\r\n                  //todo: reconcile quantity\r\n                }\r\n                else if(promotion.autoApply) {\r\n                  lines.push({\r\n                    item    : {\r\n                      internalid: Number(promotion.itemsToAdd.items[i].itemId) // cleaning kit\r\n                    },\r\n                    quantity: Number(promotion.itemsToAdd.items[i].quantityToAdd),\r\n                    options : [{\r\n                      value       : {\r\n                        internalid: promotion.promocode\r\n                      },\r\n                      cartOptionId: 'custcol_custom_promotion_used',\r\n                      label       : 'Promotion Used'\r\n                    }]\r\n                  })\r\n                }\r\n              }\r\n            }\r\n            else {\r\n              if (promotionLineInCart.length > 0) {\r\n                promotionLineInCart.forEach(function (line) {\r\n                  self.CART.removeLine({\r\n                    line_id: line.internalid\r\n                  }).then(function () {\r\n                  });\r\n                })\r\n              }\r\n            }\r\n          }\r\n        });\r\n        self.addLinesToCart(lines)\r\n      },\r\n\r\n      addLinesToCart: function (CART, lines) {\r\n        var self = this;\r\n        try {\r\n          if (lines.length > 0) {\r\n            CART.addLines({lines: lines}).fail(function (resp) {\r\n              console.log(resp);\r\n              // TODO: show message\r\n            }).then(function (resp) {\r\n              console.log('success', resp);\r\n              // TODO: show message\r\n              // TODO: custom formatting based on if custcol_custom_promotion_used is used\r\n            });\r\n          }\r\n        } catch\r\n          (e) {\r\n          console.log(e)\r\n        }\r\n      },\r\n\r\n      isPromotionCustom: function (promotions, code) {\r\n        var customPromocodes = _.pluck(promotions, 'promocode');\r\n        customPromocodes = _.map(customPromocodes, function (code) {return  code.toLowerCase();})\r\n        console.log(customPromocodes);\r\n        return customPromocodes.indexOf(code.toLowerCase()) > -1\r\n      },\r\n\r\n      checkForRougeLines: function () {\r\n        var self = this;\r\n        var promotionsInCart = self.getPromotionLines();\r\n        var customPromocodes = _.pluck(this.promotions.promotions, 'promocode');\r\n        var rougePromotions = _.difference(promotionsInCart.codes, customPromocodes);\r\n        console.log(rougePromotions);\r\n        if(rougePromotions.length > 0) {\r\n          _.each(rougePromotions, function (promocode) {\r\n            self.removePromotionsNotEligible(self.getPromotionLinesByPromotion(promocode))\r\n          })\r\n        }\r\n      },\r\n\r\n      removePromotionsNotEligible: function removePromotionsNotEligible(CART, invalidLines) {\r\n        var self     = this;\r\n        invalidLines = _.sortBy(invalidLines, function (line) { return line.internalid});\r\n        invalidLines.forEach(function (line) {\r\n          CART.removeLine({\r\n            line_id: line.internalid\r\n          }).then(function () {\r\n            console.log(line.internalid + ' removed because it isn\\'t eligible or the promotion no longer qualifies: ', line)\r\n          });\r\n        })\r\n      },\r\n\r\n      updateQuantityOnPromotionLines: function updateQuantityOnPromotionLines(CART, invalidLines) {\r\n        var self = this;\r\n        invalidLines.forEach(function (line) {\r\n          CART.updateLine({\r\n            line: {\r\n              internalid: line.line.internalid,\r\n              quantity  : line.eligibleQuantity\r\n            }\r\n          }).then(function () {\r\n            console.log(\"Line updated successfully\", line);\r\n          });\r\n        })\r\n      },\r\n\r\n      isPromotionLine: function isPromotionLine(line) {\r\n        var cartLine = line;\r\n        if (cartLine.line) cartLine = cartLine.line;\r\n        var promotionField = _.findWhere(cartLine.options, {cartOptionId: 'custcol_custom_promotion_used'});\r\n        return !!promotionField && promotionField.value;\r\n      },\r\n\r\n      getPromotionLines: function getPromotionLines(lines) {\r\n        var linesInCart = {\r\n          codes         : [],\r\n          promotionLines: [],\r\n          promotionCount: 0\r\n        };\r\n        var self        = this;\r\n        _.each(lines, function (line) {\r\n          var promotionField = _.findWhere(line.options, {cartOptionId: 'custcol_custom_promotion_used'});\r\n          if (promotionField && promotionField.value) {\r\n            linesInCart.codes.push(promotionField.value.internalid);\r\n            linesInCart.promotionLines.push(line);\r\n          }\r\n        });\r\n        linesInCart.promotionLines = _.sortBy(linesInCart.promotionLines, function (line) { return line.internalid});\r\n        linesInCart.promotionCount = _.countBy(linesInCart.codes, function (code) {return code})\r\n        return linesInCart;\r\n      },\r\n\r\n      getValidPromotionLinesByPromotion: function getValidPromotionLinesByPromotion(promotion) {\r\n        var linesInCart = [];\r\n        var self        = this;\r\n        _.each(self.lines, function (line) {\r\n          var promotionField = _.findWhere(line.options, {cartOptionId: 'custcol_custom_promotion_used'});\r\n          if (promotionField && promotionField.value) {\r\n            var items = _.pluck(promotion.itemsToAdd.items, 'itemId')\r\n            if (promotionField.value.internalid === promotion.promocode && items.indexOf(line.item.internalid.toString()) > -1) {\r\n              linesInCart.push(line);\r\n            }\r\n          }\r\n        });\r\n\r\n        return linesInCart;\r\n      },\r\n\r\n      getInvalidPromotionLinesByPromotion: function getInvalidPromotionLinesByPromotion(promotion) {\r\n        var linesToUpdate = {\r\n          linesToRemove: [],\r\n          linesToUpdate: []\r\n        };\r\n        var self          = this;\r\n        _.each(self.lines, function (line) {\r\n          var promotionField = _.findWhere(line.options, {cartOptionId: 'custcol_custom_promotion_used'});\r\n          if (promotionField && promotionField.value) {\r\n            var removeLines = [];\r\n            var itemsEligible = _.pluck(promotion.itemsToAdd.items, 'itemId');\r\n            _.each(promotion.itemsToAdd.items, function (itemToAdd) {\r\n              if (promotionField.value.internalid === promotion.promocode) {\r\n                var itemsWrong    = itemsEligible.indexOf(line.item.internalid.toString()) < 0;\r\n                var quantityWrong = line.quantity > Number(itemToAdd.quantityToAdd) || line.quantity < Number(itemToAdd.quantityToAdd);\r\n                if (itemsWrong) {\r\n                  linesToUpdate.linesToRemove.push(line)\r\n                }\r\n                if (quantityWrong) {\r\n                  linesToUpdate.linesToUpdate.push({\r\n                    line            : line,\r\n                    eligibleQuantity: Number(itemToAdd.quantityToAdd)\r\n                  })\r\n                }\r\n              }\r\n            })\r\n          }\r\n        });\r\n\r\n        return linesToUpdate\r\n      },\r\n\r\n      getPromotionLinesByPromotion: function getPromotionLinesByPromotion(promotion) { // string[]\r\n        var linesInCart = [];\r\n        var self        = this;\r\n        _.each(self.lines, function (line) {\r\n          var promotionField = _.findWhere(line.options, {cartOptionId: 'custcol_custom_promotion_used'});\r\n          if (promotionField && promotionField.value) {\r\n            if (promotionField.value.internalid === promotion) {\r\n              linesInCart.push(line);\r\n            }\r\n          }\r\n        });\r\n\r\n        return _.sortBy(linesInCart, function (line) { return line.internalid});\r\n      },\r\n\r\n      checkIfPromotionInOrder: function checkIfPromotionInOrder(cartLines, promotion) {\r\n        var lineAlreadyInCart = false;\r\n        _.each(cartLines, function (line) {\r\n          var promotionField = _.findWhere(line.options, {cartOptionId: 'custcol_custom_promotion_used'});\r\n          if (promotionField && promotionField.value) {\r\n            if (promotionField.value.internalid === promotion.promocode) lineAlreadyInCart = true;\r\n          }\r\n        });\r\n\r\n        return lineAlreadyInCart;\r\n      },\r\n\r\n      /*\r\n      * \"items\": [\r\n          {\r\n            \"itemIds\": [\r\n            \"1223\"\r\n            ],\r\n            \"quantityToPurchase\": 2,\r\n            \"isOr\": true\r\n          },\r\n          {\r\n            \"itemIds\": [\r\n            \"550\",\r\n            \"974\"\r\n            ],\r\n            \"quantityToPurchase\": 3,\r\n            \"isOr\": true\r\n          }\r\n        ],\r\n        \"quantifier\": \"any\"\r\n      * */\r\n\r\n      checkIfOrderQualifies: function checkIfOrderQualifies(cartLines, promotion) {\r\n        var self = this;\r\n        if (promotion.qualifyingItems.type === 'multiple') { // then must hit from each group\r\n          var qualificationMap   = {};\r\n          var qualificationIndex = 0;\r\n          for (var i in promotion.qualifyingItems.items) {\r\n            var itemIndex     = 0;\r\n            var mapObj        = promotion.qualifyingItems.items[i];\r\n            var caseMetForReq = false;\r\n            var isOr          = mapObj.isOr;\r\n            var qtyRequired   = mapObj.quantityToPurchase;\r\n\r\n            for (var i = 0; i < mapObj.itemIds.length; i++) {\r\n              var key               = 'case' + '_' + qualificationIndex;\r\n              qualificationMap[key] = false;\r\n              if (isOr) {\r\n                var lineInCart = _.filter(cartLines, function (line) {\r\n                  return line.item.internalid === Number(mapObj.itemIds[i])\r\n                });\r\n\r\n                if (_.size(lineInCart) > 0) {\r\n                  var qtyInCart = _.reduce(\r\n                    _.map(lineInCart, function (line) {\r\n                      console.log('pluck', line);\r\n                      if (line.extras.discount > 0) return 0;\r\n                      if (self.isPromotionLine(line)) return 0;\r\n                      return line.quantity;\r\n                    }),\r\n                    function (memo, num) { return memo + num}, 0)\r\n\r\n                  console.log('qtyInCart', qtyInCart, 'qtyRequired', qtyRequired);\r\n                  if (qtyInCart >= qtyRequired) {\r\n                    qualificationMap[key] = true;\r\n                    break;\r\n                  }\r\n                }\r\n              }\r\n              else {\r\n                var caseMet = {};\r\n                _.each(mapObj.items, function (item) {\r\n                  caseMet[item] = false;\r\n                });\r\n                _.each(cartLines, function (line) {\r\n                  var itemID = line.item.internalid.toString();\r\n                  var qty    = line.quantity;\r\n                  if (mapObj.indexOf(itemID) > -1) {\r\n                    caseMet[itemID] = qty >= qtyRequired;\r\n                  }\r\n                });\r\n                var summary = _.countBy(caseMet, function (met) {\r\n                  return met;\r\n                });\r\n                console.log(summary);\r\n              }\r\n              itemIndex++;\r\n            }\r\n            qualificationIndex++;\r\n          }\r\n\r\n          console.log(qualificationMap);\r\n        }\r\n        else if (promotion.qualifyingItems.type === 'single') {\r\n          var givePromotion = false;\r\n          for (var i in promotion.qualifyingItems.items) {\r\n            var mapObj      = promotion.qualifyingItems.items[i];\r\n            var qtyRequired = mapObj.quantityToPurchase;\r\n            var lineInCart  = _.filter(cartLines, function (line) {\r\n              return line.item.internalid === Number(mapObj.itemIds[i])\r\n            });\r\n\r\n            if (_.size(lineInCart) > 0) {\r\n              var qtyInCart = _.reduce(\r\n                _.map(lineInCart, function (line) {\r\n                  if (line.extras.discount > 0) return 0;\r\n                  if (self.isPromotionLine(line)) return 0;\r\n                  return line.quantity;\r\n                }),\r\n                function (memo, num) { return memo + num}, 0)\r\n\r\n              console.log('qtyInCart', qtyInCart, 'qtyRequired', qtyRequired);\r\n              if (qtyInCart >= qtyRequired) {\r\n                givePromotion = true;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n\r\n          console.log('single: give promotion', givePromotion)\r\n          return givePromotion;\r\n        }\r\n\r\n        return false;\r\n      },\r\n\r\n      getFirstAndLastOfMonth: function getFirstAndLastOfMonth() {\r\n        var now               = new Date();\r\n        var firstDayOfMonthStr = (now.getMonth() + 1).toString() + '/1/' + now.getFullYear();\r\n        var firstDayOfMonth    = new Date(firstDayOfMonthStr);\r\n        var lastDayOfMonth     = new Date(now.getFullYear(), now.getMonth() + 1, 0);\r\n        var lastDayOfMonthStr  = (now.getMonth() + 1).toString() + '/' + lastDayOfMonth.getDate() + '/' + now.getFullYear();\r\n        return {\r\n          firstDayOfMonthStr: firstDayOfMonthStr,\r\n          firstDayOfMonth   : firstDayOfMonth,\r\n          lastDayOfMonthStr : lastDayOfMonthStr,\r\n          lastDayOfMonth    : lastDayOfMonth,\r\n          year              : now.getFullYear(),\r\n          year2Digits       : now.getFullYear().toString().substring(2),\r\n          month             : monthNames[now.getMonth()],\r\n          monthAbbr         : monthAbbr[now.getMonth()]\r\n        }\r\n      },\r\n\r\n      getCleaningKitPromotion: function getCleaningKitPromotion() {\r\n        var dateObj = this.getFirstAndLastOfMonth();\r\n        return 'CleaningKit' + dateObj.monthAbbr + '' + dateObj.year2Digits;\r\n      }\r\n\r\n    };\r\n  });\r\n"},{"path":"\\Trevera\\TreveraPromotions@1.0.0\\Modules\\Extension\\Sass\\_promotions-extension.scss","type":"text/x-scss","contents":".content-cleaning-kit-landing {\r\n    @extend .container;\r\n    @include site-max-width-container;\r\n    padding-left: $sc-content-padding;\r\n    padding-right: $sc-content-padding;\r\n    padding-top: $sc-padding-lv8;\r\n}\r\n\r\n\r\n[data-view=\"promocode-message-placeholder\"] {\r\n    a {\r\n        text-decoration: underline;\r\n    }\r\n    .global-views-message-button {\r\n        display: none;\r\n    }\r\n}\r\n"},{"path":"\\Trevera\\TreveraPromotions@1.0.0\\Modules\\Extension\\SuiteScript\\LiveOrder.Model.TrvPromotions.js","type":"application/javascript","contents":"define('LiveOrder.Model.TrvPromotions', [\r\n  'SC.Models.Init',\r\n  'Application',\r\n  'underscore'\r\n], function LiveOrderModelTrvPromotions(\r\n  ModelsInit,\r\n  Application,\r\n  _\r\n) {\r\n\r\n  'use strict';\r\n\r\n  var PROFILE_HAS_WARRANTY_FIELD = 'custentity_hf_account_has_warranty';\r\n  var CLEANING_KIT_ITEM_ID       = 120; //\r\n  var PROMO_CODE_FIELD           = 'custcol_custom_promotion_used'; // flag for items that shouldnt have a charge\r\n  var PROMO_CODE_FIELD_MODEL     = 'CUSTCOL_CUSTOM_PROMOTION_USED'; // flag for items that shouldnt have a charge\r\n\r\n  var getItemType   = function getItemType(longItemType) {\r\n    switch (longItemType) {\r\n      case 'Inventory Item':\r\n        return 'InvtPart';\r\n      default:\r\n      // Do nothing\r\n    }\r\n    return 'NonInvtPart'\r\n  };\r\n  var getOrderItems = function getOrderLines(self) {\r\n    var orderFields = ModelsInit.order.getFieldValues();\r\n    var lines;\r\n\r\n    try {\r\n      lines = ModelsInit.order.getItems();\r\n    } catch (e) {\r\n      lines = [];\r\n    }\r\n    return lines;\r\n  };\r\n\r\n  function getPromotionLineToAdd(item, quantity, promotion) {\r\n    var line = {\r\n      item    : {\r\n        internalid: item,\r\n        type      : 'InvtPart'\r\n      },\r\n      quantity: quantity.toString(),\r\n      options : [{\r\n        value       : {internalid: promotion},\r\n        cartOptionId: PROMO_CODE_FIELD,\r\n        label       : 'Promotion Used',\r\n        type        : 'text'\r\n      }]\r\n    };\r\n    nlapiLogExecution('DEBUG', 'lineToAdd: item', JSON.stringify(promotion));\r\n    nlapiLogExecution('DEBUG', 'lineToAdd', JSON.stringify(line));\r\n    return line;\r\n  };\r\n\r\n  try {\r\n    var LiveOrder = require('LiveOrder.Model');\r\n  } catch (e) {\r\n    log('LiveOrder.Model', e.message || 'Model not found');\r\n  }\r\n\r\n  try {\r\n    var StoreItem = require('StoreItem.Model');\r\n  } catch (e) {\r\n    log('StoreItem.Model', e.message || 'Model not found');\r\n  }\r\n\r\n  function getPromotionData() {\r\n    var ctx                = ModelsInit.context;\r\n    var promoData          = ctx.getSessionObject('trvPromos') || \"\";\r\n    var promoDataRefreshed = ctx.getSessionObject('trvPromosTs') || \"\";\r\n    var now                = new Date();\r\n    var session            = 60 * 60 * 1000; // one hour\r\n    var refreshData        = true;\r\n\r\n    nlapiLogExecution('DEBUG', 'promoData', JSON.stringify(promoData));\r\n    if (promoDataRefreshed.length > 0) {\r\n      refreshData = now.getDate() - Number(promoDataRefreshed) > session;\r\n    }\r\n    nlapiLogExecution('DEBUG', 'refreshData', refreshData);\r\n    if (promoData.length < 1 || refreshData) {\r\n      var url      = nlapiResolveURL('SUITELET', 'customscript_trv_sca_get_promotions', 'customdeploy_trv_sca_get_promotions', true);\r\n      url += '&user=' + ModelsInit.session.getCustomer().getFieldValues().internalid\r\n      var response = nlapiRequestURL(url, null, {'Content-Type': 'application/json'});\r\n      var body     = response.getBody();\r\n\r\n      nlapiLogExecution('DEBUG', 'body', JSON.stringify(body));\r\n      ctx.setSessionObject('trvPromos', body);\r\n\r\n    }\r\n    try {\r\n      return JSON.parse(ctx.getSessionObject('trvPromos'));\r\n    } catch (e) {\r\n      nlapiLogExecution('ERROR', 'coudnt parse body', JSON.stringify(e));\r\n      return {};\r\n    }\r\n  }\r\n\r\n  function getValidPromotionLinesByPromotion(lines, promotion) {\r\n    var linesInCart = [];\r\n    _(lines).each(function (line) {\r\n      var promotionField = _(line.options).findWhere({id: PROMO_CODE_FIELD_MODEL});\r\n      nlapiLogExecution('DEBUG', 'getValidPromotionLinesByPromotion: line', JSON.stringify(line.options));\r\n      nlapiLogExecution('DEBUG', 'getValidPromotionLinesByPromotion: promotionField', JSON.stringify(promotionField));\r\n      if (promotionField && promotionField.value) {\r\n        var items = _(promotion.itemsToAdd.items).pluck('itemId')\r\n        if(promotion.type === 1 && promotionField.value.internalid === promotion.promocode) {\r\n          linesInCart.push(line);\r\n        } else if (promotionField.value.internalid === promotion.promocode && items.indexOf(line.internalid.toString()) > -1) {\r\n          linesInCart.push(line);\r\n        }\r\n      }\r\n    });\r\n    return linesInCart;\r\n  }\r\n\r\n  function isPromotionItem(line) {\r\n    var promotionField = _(line.options).findWhere({id: PROMO_CODE_FIELD_MODEL});\r\n    nlapiLogExecution('DEBUG', 'isPromotionItem', JSON.stringify(promotionField));\r\n    return !!promotionField && promotionField.value;\r\n  }\r\n\r\n  function isPromotionLine(line) {\r\n    var promotionField = _(line.options).findWhere({cartOptionId: PROMO_CODE_FIELD});\r\n    nlapiLogExecution('DEBUG', 'isPromotionLine', JSON.stringify(promotionField));\r\n    return !!promotionField && promotionField.value;\r\n  }\r\n\r\n  function checkIfOrderQualifies(lines, promotion) {\r\n    if (promotion.type === 1) {\r\n      return Number(promotion.redemptions.numberCanClaim) > 0;\r\n    }\r\n    else if (promotion.qualifyingItems.type === 'multiple') { // then must hit from each group\r\n      var qualificationMap   = {};\r\n      var qualificationIndex = 0;\r\n      for (var i in promotion.qualifyingItems.items) {\r\n        var itemIndex   = 0;\r\n        var mapObj      = promotion.qualifyingItems.items[i];\r\n        var isOr        = mapObj.isOr;\r\n        var qtyRequired = mapObj.quantityToPurchase;\r\n\r\n        for (var i = 0; i < mapObj.itemIds.length; i++) {\r\n          var key               = 'case' + '_' + qualificationIndex;\r\n          qualificationMap[key] = false;\r\n          if (isOr) {\r\n            var lineInCart = [];\r\n            _(lines).each(function (line) {\r\n              if (Number(line.internalid) === Number(mapObj.itemIds[i])) {\r\n                lineInCart.push(line);\r\n              }\r\n            });\r\n\r\n            nlapiLogExecution('DEBUG', 'lineInCart', JSON.stringify(lineInCart));\r\n            if (lineInCart.length > 0) {\r\n              var qtyInCart = 0\r\n              _(lineInCart).each(function (line) {\r\n                nlapiLogExecution('DEBUG', 'line.isDiscount', line.discount);\r\n                if (line.discount > 0) qtyInCart += 0;\r\n                if (isPromotionItem(line)) qtyInCart += 0;\r\n                qtyInCart += line.quantity;\r\n              })\r\n\r\n              nlapiLogExecution('DEBUG', 'qtyInCart ' + qtyInCart, 'qtyRequired ' + qtyRequired);\r\n              if (qtyInCart >= qtyRequired) {\r\n                qualificationMap[key] = true;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n          else {\r\n            var caseMet = {};\r\n            _.each(mapObj.items, function (item) {\r\n              caseMet[item] = false;\r\n            });\r\n            _.each(lines, function (line) {\r\n              var itemID = line.internalid.toString();\r\n              var qty    = line.quantity;\r\n              if (mapObj.indexOf(itemID) > -1) {\r\n                caseMet[itemID] = qty >= qtyRequired;\r\n              }\r\n            });\r\n            var summary = _(caseMet).countBy(function (met) {\r\n              return met;\r\n            });\r\n            nlapiLogExecution('DEBUG', 'summary', JSON.stringify(summary));\r\n          }\r\n          itemIndex++;\r\n        }\r\n        qualificationIndex++;\r\n      }\r\n\r\n      nlapiLogExecution('DEBUG', 'qualificationMap', JSON.stringify(qualificationMap));\r\n    }\r\n    else if (promotion.qualifyingItems.type === 'single') {\r\n      var givePromotion = false;\r\n      for (var i in promotion.qualifyingItems.items) {\r\n        var mapObj      = promotion.qualifyingItems.items[i];\r\n        var qtyRequired = mapObj.quantityToPurchase;\r\n        var lineInCart  = [];\r\n        _(lines).each(function (line) {\r\n          if (Number(line.internalid) === Number(mapObj.itemIds[i])) {\r\n            lineInCart.push(line);\r\n          }\r\n        });\r\n\r\n        nlapiLogExecution('DEBUG', 'lineInCart', JSON.stringify(lineInCart));\r\n        if (lineInCart.length > 0) {\r\n          var qtyInCart = 0\r\n          _(lineInCart).each(function (line) {\r\n            nlapiLogExecution('DEBUG', 'line.isDiscount', line.discount);\r\n            if (line.discount > 0) qtyInCart += 0;\r\n            if (isPromotionItem(line)) qtyInCart += 0;\r\n            qtyInCart += line.quantity;\r\n          })\r\n\r\n          nlapiLogExecution('DEBUG', 'qtyInCart ' + qtyInCart, 'qtyRequired ' + qtyRequired);\r\n          if (qtyInCart >= qtyRequired) {\r\n            givePromotion = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      nlapiLogExecution('DEBUG', 'single: give promotion', givePromotion)\r\n      return givePromotion;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function checkIfOrderQualifiesLines(lines, promotion) {\r\n    if (promotion.type === 1) {\r\n      return promotion.redemptions.canClaim;\r\n    }\r\n    else if (promotion.qualifyingItems.type === 'multiple') { // then must hit from each group\r\n      var qualificationMap   = {};\r\n      var qualificationIndex = 0;\r\n      for (var i in promotion.qualifyingItems.items) {\r\n        var itemIndex   = 0;\r\n        var mapObj      = promotion.qualifyingItems.items[i];\r\n        var isOr        = mapObj.isOr;\r\n        var qtyRequired = mapObj.quantityToPurchase;\r\n\r\n        for (var i = 0; i < mapObj.itemIds.length; i++) {\r\n          var key               = 'case' + '_' + qualificationIndex;\r\n          qualificationMap[key] = false;\r\n          if (isOr) {\r\n            var lineInCart = [];\r\n            _(lines).each(function (line) {\r\n\r\n              nlapiLogExecution('DEBUG', 'Number(line.item.internalid) ' + Number(line.item.internalid), Number(mapObj.itemIds[i]));\r\n              if (Number(line.item.internalid) === Number(mapObj.itemIds[i])) {\r\n                lineInCart.push(line);\r\n              }\r\n            });\r\n\r\n            nlapiLogExecution('DEBUG', 'lineInCart', JSON.stringify(lineInCart));\r\n            if (lineInCart.length > 0) {\r\n              var qtyInCart = 0\r\n              _(lineInCart).each(function (line) {\r\n                nlapiLogExecution('DEBUG', 'line.isDiscount', line.discount);\r\n                if (line.discount > 0) qtyInCart += 0;\r\n                if (isPromotionLine(line)) qtyInCart += 0;\r\n                qtyInCart += line.quantity;\r\n              })\r\n\r\n              nlapiLogExecution('DEBUG', 'qtyInCart ' + qtyInCart, 'qtyRequired ' + qtyRequired);\r\n              if (qtyInCart >= qtyRequired) {\r\n                qualificationMap[key] = true;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n          else {\r\n            var caseMet = {};\r\n            _.each(mapObj.items, function (item) {\r\n              caseMet[item] = false;\r\n            });\r\n            _.each(lines, function (line) {\r\n              var itemID = line.item.internalid.toString();\r\n              var qty    = line.quantity;\r\n              if (mapObj.indexOf(itemID) > -1) {\r\n                caseMet[itemID] = qty >= qtyRequired;\r\n              }\r\n            });\r\n            var summary = _(caseMet).countBy(function (met) {\r\n              return met;\r\n            });\r\n            nlapiLogExecution('DEBUG', 'summary', JSON.stringify(summary));\r\n          }\r\n          itemIndex++;\r\n        }\r\n        qualificationIndex++;\r\n      }\r\n\r\n      nlapiLogExecution('DEBUG', 'qualificationMap', JSON.stringify(qualificationMap));\r\n    }\r\n    else if (promotion.qualifyingItems.type === 'single') {\r\n      if (promotion.redemptions.numberClaimed > 0) {\r\n        nlapiLogExecution('DEBUG', 'checkIfOrderQualifiesLines promotion.redemptions.numberClaimed', promotion.redemptions.numberClaimed);\r\n        return false;\r\n      }\r\n      var givePromotion = false;\r\n      for (var i in promotion.qualifyingItems.items) {\r\n        var mapObj      = promotion.qualifyingItems.items[i];\r\n        var qtyRequired = mapObj.quantityToPurchase;\r\n        var lineInCart  = [];\r\n        _(lines).each(function (line) {\r\n          nlapiLogExecution('DEBUG', 'checkIfOrderQualifiesLines', JSON.stringify(isPromotionLine(line)));\r\n          nlapiLogExecution('DEBUG', 'checkIfOrderQualifiesLines', line.item.internalid);\r\n          if (Number(line.item.internalid) === Number(mapObj.itemIds[i]) && !isPromotionLine(line)) {\r\n            lineInCart.push(line);\r\n          }\r\n        });\r\n\r\n        nlapiLogExecution('DEBUG', 'lineInCart', JSON.stringify(lineInCart));\r\n        if (lineInCart.length > 0) {\r\n          var qtyInCart = 0\r\n          _(lineInCart).each(function (line) {\r\n            nlapiLogExecution('DEBUG', 'line.isDiscount', line.discount);\r\n            if (line.discount > 0) qtyInCart += 0;\r\n            if (isPromotionLine(line)) qtyInCart += 0;\r\n            qtyInCart += line.quantity;\r\n          })\r\n\r\n          nlapiLogExecution('DEBUG', 'qtyInCart ' + qtyInCart, 'qtyRequired ' + qtyRequired);\r\n          if (qtyInCart >= qtyRequired) {\r\n            givePromotion = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      nlapiLogExecution('DEBUG', 'checkIfOrderQualifiesLines single: give promotion', givePromotion)\r\n      return givePromotion;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function getPromotionLines(lines) {\r\n    var linesInCart = {\r\n      codes         : [],\r\n      promotionLines: [],\r\n      promotionCount: 0\r\n    };\r\n    _(lines).each(function (line) {\r\n      //nlapiLogExecution('DEBUG', 'getPromotionLines', JSON.stringify(line.options))\r\n      var promotionField = _.findWhere(line.options, {cartOptionId: PROMO_CODE_FIELD});\r\n      if (promotionField && promotionField.value) {\r\n        linesInCart.codes.push(promotionField.value.internalid);\r\n        linesInCart.promotionLines.push(line);\r\n      }\r\n    });\r\n    linesInCart.promotionCount = _(linesInCart.codes).countBy(function (code) {return code})\r\n    return linesInCart;\r\n  }\r\n\r\n  function getPromotionLinesToAddFromPromotion(promotion) {\r\n    var linesToAdd = []\r\n    if(promotion.type === 1) {\r\n      linesToAdd.push(getPromotionLineToAdd(CLEANING_KIT_ITEM_ID, Number(promotion.redemptions.numberCanClaim), promotion.promocode));\r\n    }\r\n    else {\r\n      for (var i = 0; i < promotion.itemsToAdd.items.length; i++) {\r\n        nlapiLogExecution('DEBUG', 'single: give promotion.promocode', promotion.promocode)\r\n        linesToAdd.push(getPromotionLineToAdd(promotion.itemsToAdd.items[i].itemId, Number(promotion.itemsToAdd.items[i].quantityToAdd), promotion.promocode));\r\n      }\r\n    }\r\n    return linesToAdd;\r\n  }\r\n\r\n  function getInvalidPromotionLinesByPromotion(lines, promotion) {\r\n    var linesToUpdate  = {linesToRemove: [], linesToUpdate: []};\r\n    var itemsEligible  = _.pluck(promotion.itemsToAdd.items, 'itemId');\r\n    var orderQualifies = checkIfOrderQualifiesLines(lines, promotion);\r\n    nlapiLogExecution('DEBUG', 'getInvalidPromotionLinesByPromotion itemsEligible ' + promotion.promocode + ' orderQualifies ' + orderQualifies, JSON.stringify(itemsEligible))\r\n    _(lines).each(function (line) {\r\n      var isPromotionLine = _.findWhere(line.options, {cartOptionId: PROMO_CODE_FIELD});\r\n      nlapiLogExecution('DEBUG', 'getInvalidPromotionLinesByPromotion check isPromotionLine', JSON.stringify(isPromotionLine));\r\n      if (!!isPromotionLine && isPromotionLine.value.internalid === promotion.promocode) {\r\n        nlapiLogExecution('DEBUG', 'getInvalidPromotionLinesByPromotion check if remove line that doesn\\'t qualify ', JSON.stringify(line));\r\n        if (!orderQualifies) { linesToUpdate.linesToRemove.push(line); }\r\n        else {\r\n          nlapiLogExecution('DEBUG', 'getInvalidPromotionLinesByPromotion promotion ', JSON.stringify(promotion));\r\n          if (promotion.type !== 1) {\r\n            var qualifyingItemInPromotionMap = _(promotion.itemsToAdd.items).where({itemId: line.item.internalid.toString()}); // check if item in cart\r\n            nlapiLogExecution('DEBUG', 'getInvalidPromotionLinesByPromotion entry ', JSON.stringify(qualifyingItemInPromotionMap))\r\n            if (qualifyingItemInPromotionMap && qualifyingItemInPromotionMap.length > 0) {\r\n              var quantityAllowedOfPromotion = Number(qualifyingItemInPromotionMap[0].quantityToAdd);\r\n              var quantityWrong              = line.quantity > quantityAllowedOfPromotion || line.quantity < quantityAllowedOfPromotion;\r\n              nlapiLogExecution('DEBUG', 'getInvalidPromotionLinesByPromotion quantity', quantityWrong)\r\n              if (quantityWrong) {\r\n                linesToUpdate.linesToUpdate.push({\r\n                  line            : line,\r\n                  eligibleQuantity: Number(qualifyingItemInPromotionMap[0].quantityToAdd)\r\n                });\r\n              }\r\n            }\r\n          }\r\n          else {\r\n            var quantityAllowedOfPromotion = Number(promotion.redemptions.numberCanClaim)\r\n            nlapiLogExecution('DEBUG', 'getInvalidPromotionLinesByPromotion cleaning kit ' + line.quantity, quantityAllowedOfPromotion);\r\n            var quantityWrong              = line.quantity > quantityAllowedOfPromotion;\r\n            if (quantityWrong) {\r\n              linesToUpdate.linesToUpdate.push({\r\n                line            : line,\r\n                eligibleQuantity: Number(quantityAllowedOfPromotion)\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n    });\r\n    return linesToUpdate;\r\n  }\r\n\r\n  function checkForRogueLines(lines, promotionsInCart) {\r\n    var self             = this;\r\n    var customPromocodes = _.pluck(promotionsInCart, 'promocode');\r\n    var rougePromotions  = _(promotionsInCart.codes).difference(customPromocodes);\r\n    nlapiLogExecution('DEBUG', 'checkForRogueLines promotionsInCart', JSON.stringify(promotionsInCart));\r\n    nlapiLogExecution('DEBUG', 'checkForRogueLines ' + customPromocodes.toString(), JSON.stringify(rougePromotions));\r\n    if (rougePromotions.length > 0) {\r\n      _(rougePromotions).each(function (promocode) {\r\n        removePromotionsNotEligible(lines, getPromotionLinesByPromotion(promocode))\r\n      })\r\n    }\r\n  }\r\n\r\n  function getPromotionLinesByPromotion(lines, promotion) { // string[]\r\n    var linesInCart = [];\r\n    _(lines).each(function (line) {\r\n      var promotionField = _(line.options).findWhere({cartOptionId: PROMO_CODE_FIELD});\r\n      if (promotionField && promotionField.value) {\r\n        if (promotionField.value === promotion) {\r\n          linesInCart.push(line);\r\n        }\r\n      }\r\n    });\r\n\r\n    return linesInCart;\r\n  }\r\n\r\n  function updateQuantityOnPromotionLines(invalidLines) {\r\n    invalidLines.forEach(function (line) {\r\n      nlapiLogExecution('DEBUG', 'updateQuantityOnPromotionLines', JSON.stringify(line));\r\n      var lineObj = line.line;\r\n      nlapiLogExecution('DEBUG', 'updateQuantityOnPromotionLines lineObj', JSON.stringify(lineObj.internalid));\r\n      try {\r\n        ModelsInit.order.updateItemQuantity( {orderitemid: lineObj.internalid, quantity: line.eligibleQuantity})\r\n        //LiveOrder.updateLine(lineObj.internalid, {quantity: line.eligibleQuantity});\r\n      } catch (e) {\r\n        nlapiLogExecution('error', 'updateQuantityOnPromotionLines', JSON.stringify(e));\r\n      }\r\n    })\r\n  }\r\n\r\n  function removePromotionsNotEligible(invalidLines) {\r\n    for (var i = 0; i < invalidLines.length; i++) {\r\n      LiveOrder.removeLine(invalidLines[i].internalid)\r\n    }\r\n  }\r\n\r\n  function handlePromotions(lines) {\r\n    //var lines              = getOrderItems(); // no reference to line\r\n    var promotionData      = getPromotionData();\r\n    var promotionLines     = getPromotionLines(lines);\r\n    var invalidLines       = [];\r\n    var linesWrongQuantity = [];\r\n    if (promotionLines.codes.length > 0) {\r\n      _.each(promotionData.promotions, function (promo) {\r\n        if (promotionLines.codes.indexOf(promo.promocode) > -1) {\r\n          var linesToUpdate = getInvalidPromotionLinesByPromotion(lines, promo);\r\n          nlapiLogExecution('DEBUG', 'handlePromotions linesToUpdate', JSON.stringify(linesToUpdate));\r\n          if (linesToUpdate.linesToRemove.length > 0) {\r\n            invalidLines = invalidLines.concat(linesToUpdate.linesToRemove)\r\n          }\r\n          if (linesToUpdate.linesToUpdate.length > 0) {\r\n            linesWrongQuantity = linesWrongQuantity.concat(linesToUpdate.linesToUpdate)\r\n          }\r\n        }\r\n      })\r\n      if (invalidLines.length > 0) {\r\n        nlapiLogExecution('DEBUG', 'handlePromotions invalidLines', JSON.stringify(invalidLines));\r\n        removePromotionsNotEligible(invalidLines)\r\n      }\r\n      if (linesWrongQuantity.length > 0) {\r\n        try {\r\n          updateQuantityOnPromotionLines(linesWrongQuantity)\r\n        } catch (e) {\r\n          nlapiLogExecution('error', 'handlePromotions', JSON.stringify(e));\r\n        }\r\n      }\r\n      //checkForRogueLines(lines, promotionLines);\r\n    }\r\n\r\n    var autoApplyPromotions = [];\r\n    _.each(promotionData.promotions, function (promo) {\r\n      if (promo.type === 1 && promo.autoApply) {// cleaning kit\r\n        var lineAlreadyInCart = promotionLines.codes.indexOf(promo.promocode) > -1;\r\n        nlapiLogExecution('DEBUG', 'handlePromotions lineAlreadyInCart', lineAlreadyInCart);\r\n        if (!lineAlreadyInCart && Number(promo.redemptions.numberCanClaim) > 0) {\r\n          autoApplyPromotions.push(getPromotionLineToAdd(CLEANING_KIT_ITEM_ID, Number(promo.redemptions.numberCanClaim), promo.promocode));\r\n        }\r\n      }\r\n      else {\r\n        if (promo.autoApply) {\r\n          var givePromotion     = checkIfOrderQualifies(lines, promo);\r\n          var lineAlreadyInCart = promotionLines.codes.indexOf(promo.promocode) > -1;\r\n          if (!lineAlreadyInCart && givePromotion) {\r\n            autoApplyPromotions.push(getPromotionLinesToAddFromPromotion(promo))\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    if (autoApplyPromotions.length > 0) {\r\n      try {\r\n        nlapiLogExecution('DEBUG', 'before:LiveOrder.addPromotion linesToAdd[0]', JSON.stringify(autoApplyPromotions));\r\n        var itemsAdded = LiveOrder.addLines(autoApplyPromotions);\r\n        nlapiLogExecution('DEBUG', 'before:LiveOrder.addPromotion itemsAdded', JSON.stringify(itemsAdded));\r\n      } catch (e) {\r\n        nlapiLogExecution('ERROR', 'before:LiveOrder.addPromotion failed adding free lines', JSON.stringify(e))\r\n      }\r\n    }\r\n  }\r\n\r\n  if (LiveOrder && StoreItem) {\r\n    Application.on('after:LiveOrder.addPromotion', function beforeAddPromotion(self, promo_code) {\r\n      nlapiLogExecution('DEBUG', 'after:LiveOrder.addPromotion', JSON.stringify(arguments));\r\n      return promo_code;\r\n    });\r\n\r\n    Application.on('after:LiveOrder.setPromoCodes', function beforeAddPromotion(self, promo_code) {\r\n      nlapiLogExecution('DEBUG', 'after:LiveOrder.setPromoCodes', JSON.stringify(arguments));\r\n      return promo_code;\r\n    });\r\n\r\n    Application.on('before:LiveOrder.addPromotion', function beforeAddPromotion(self, promo_code) {\r\n      nlapiLogExecution('DEBUG', 'before:LiveOrder.addPromotion', JSON.stringify(self));\r\n      if (ModelsInit.session.isLoggedIn2()) {\r\n        var promotionData = getPromotionData();\r\n        var linesToAdd    = [];\r\n        var promoRecord   = _(promotionData.promotions).find(function (promo) {\r\n          return promo.promocode.toLowerCase() == promo_code.toLowerCase();\r\n        });\r\n\r\n        nlapiLogExecution('DEBUG', 'before:LiveOrder.addPromotion', 'searching for promo that matches ' + promo_code);\r\n        nlapiLogExecution('DEBUG', 'before:LiveOrder.addPromotion', 'matching ' + JSON.stringify(promoRecord));\r\n        if (promoRecord) {\r\n          var lines         = getOrderItems();\r\n          var givePromotion = checkIfOrderQualifies(lines, promoRecord);\r\n          nlapiLogExecution('DEBUG', 'before:LiveOrder.addPromotion', 'give promotion? ' + givePromotion);\r\n          var promotionLines = getPromotionLines(lines);\r\n          nlapiLogExecution('DEBUG', 'before:LiveOrder.addPromotion promotionLines', JSON.stringify(promotionLines));\r\n          var alreadyInCart = promotionLines.codes.indexOf(promo_code) > -1;\r\n          if (alreadyInCart) {\r\n            nlapiLogExecution('DEBUG', 'before:LiveOrder.addPromotion', 'promotion already in cart? yes');\r\n            return promo_code;\r\n          }\r\n          if (givePromotion) {\r\n            var promotionLineInCart = getValidPromotionLinesByPromotion(lines, promoRecord);\r\n            if (promotionLineInCart.length < 1) {\r\n              linesToAdd = getPromotionLinesToAddFromPromotion(promoRecord);\r\n              if (linesToAdd.length > 0) {\r\n                try {\r\n                  var itemsAdded = LiveOrder.addLines(linesToAdd);\r\n                  nlapiLogExecution('DEBUG', 'before:LiveOrder.addPromotion itemsAdded', JSON.stringify(itemsAdded));\r\n                } catch (e) {\r\n                  nlapiLogExecution('ERROR', 'before:LiveOrder.addPromotion failed adding free lines', JSON.stringify(e))\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          nlapiLogExecution('DEBUG', 'before:LiveOrder.addPromotion', 'no custom match found');\r\n        }\r\n      }\r\n      // on success returns full order object\r\n      return promo_code;\r\n    });\r\n\r\n    Application.on('after:LiveOrder.get', function afterGet(self, result) {\r\n      var lines = result.lines;\r\n      nlapiLogExecution('DEBUG', 'after:LiveOrder.get', JSON.stringify(lines));\r\n      // reconcile promotion lines\r\n      handlePromotions(lines);\r\n      var order_fields = self.getFieldValues();\r\n      result.lines     = self.getLines(order_fields);\r\n      return result;\r\n    });\r\n  }\r\n});\r\n"},{"path":"\\Trevera\\TreveraPromotions@1.0.0\\Modules\\Extension\\SuiteScript\\TrvPromotions.ServiceController.js","type":"application/javascript","contents":"define('TrvPromotions.ServiceController', [\r\n  'LiveOrder.Model.TrvPromotions'\r\n], function TrvPromotions() {\r\n  'use strict';\r\n});\r\n"},{"path":"\\Trevera\\TreveraPromotions@1.0.0\\Modules\\Extension\\SuiteScript2\\Promotions.Extension.Model.js","type":"application/javascript","contents":"/**\r\n * @NApiVersion 2.1\r\n * @NModuleScope TargetAccount\r\n */\r\ndefine(['N/format', 'N/log', 'N/runtime', 'N/search'], function (format, log, runtime, search) {\r\n  'use strict';\r\n\r\n  var monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n  var monthAbbr  = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"];\r\n\r\n  var PromotionsHandler = {\r\n    getPromotions: function (request) {\r\n      var parameters  = request.parameters;\r\n      var user        = runtime.getCurrentUser();\r\n      var isLoggedIn  = this.isLoggedIn();\r\n      var cleaningKit = request.parameters.cleaningkit;\r\n      var response    = {eligibility: {}, promotions: {}, redemptions: {}, canClaim: false};\r\n\r\n      //TODO: not going to be passing any coupon codes because everything is supposed to be automatic\r\n      if (cleaningKit && cleaningKit === 'T' && isLoggedIn) {\r\n        var eligibility   = this.getPromotionEligibilityCleaningKits(user.id);\r\n        var dateObj       = this.getFirstAndLastOfMonth();\r\n        var coupon        = 'CleaningKit' + dateObj.monthAbbr + '' + dateObj.year2Digits;\r\n        var allPromotions = this.searchForPromotion(coupon, user.id);\r\n        for (var key in allPromotions) {\r\n          response.redemptions[key]          = this.searchForRedemption(key, user)\r\n          response.redemptions[key].canClaim = response.redemptions[key].numberClaimed < eligibility.numberWarranties;\r\n          if (canClaim) {\r\n            response.promotions[key]            = allPromotions[key]\r\n            response.canClaim                   = response.redemptions[key].numberClaimed < eligibility.numberWarranties;\r\n            response.promotions[key].numberUses = Number(eligibility.numberWarranties);\r\n            response.promotions[key].code       = response.promotions[key].promocode + \"_\" + user.id; // build key of actual promotion\r\n            response.promotions[key].redemption = response.redemptions[key];\r\n          }\r\n        }\r\n        response.eligibility = eligibility;\r\n      }\r\n      else {\r\n        var coupon = request.parameters['coupon'];\r\n        log.error('coupon', coupon);\r\n        var allPromotions;\r\n        if (coupon && coupon.length > 0) {\r\n          allPromotions = this.searchForPromotion(coupon, user.id);\r\n        }\r\n        else {\r\n          allPromotions = this.searchForPromotion('', user.id);\r\n        }\r\n\r\n        for (var key in allPromotions) {\r\n          response.redemptions[key] = this.searchForRedemption(key, user)\r\n          if (allPromotions[key].type === 1) { //cleaning kit\r\n            var eligibility = this.getPromotionEligibilityCleaningKits(user.id);\r\n            log.error('eligibility', eligibility);\r\n            var canClaim = response.redemptions[key].numberClaimed < eligibility.numberWarranties;\r\n            if (canClaim) {\r\n              response.redemptions[key].canClaim   = canClaim;\r\n              response.promotions[key]             = allPromotions[key];\r\n              response.promotions[key].canClaim    = canClaim;\r\n              response.promotions[key].numberUses  = Number(eligibility.numberWarranties);\r\n              response.promotions[key].eligibility = eligibility;\r\n              response.promotions[key].code        = response.promotions[key].promocode + \"_\" + user.id; // build key of actual promotion\r\n              response.promotions[key].redemption  = response.redemptions[key];\r\n            }\r\n          }\r\n          if (allPromotions[key].type === 2) { //single\r\n            var canClaim = response.redemptions[key].numberClaimed < 1;\r\n            if (canClaim) {\r\n              response.redemptions[key].canClaim = canClaim;\r\n              response.promotions[key]           = allPromotions[key];\r\n              response.promotions[key].canClaim  = canClaim;\r\n              response.promotions[key].code      = response.promotions[key].promocode/* + \"_\" + user.id*/; // build key of actual promotion - only need this if we're generating promotion codes\r\n\r\n              response.promotions[key].redemption = response.redemptions[key];\r\n            }\r\n          }\r\n          if (allPromotions[key].type === 3) { //multiple\r\n            var canClaim = response.redemptions[key].numberClaimed < allPromotions[key].numberUses;\r\n            if (canClaim) {\r\n              response.redemptions[key].canClaim = canClaim;\r\n              response.promotions[key]           = allPromotions[key];\r\n              response.promotions[key].canClaim  = canClaim;\r\n              response.promotions[key].code      = response.promotions[key].promocode/* + \"_\" + user.id*/; // build key of actual promotion - only need this if we're generating promotion codes\r\n\r\n              response.promotions[key].redemption = response.redemptions[key];\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      /*\r\n      var suiteletURL = url.resolveScript(\r\n        {scriptId: 'customscript_sca_get_promotions', deploymentId: 'customdeploy_sca_get_promotions', params: {user: user.id, cleaningkit: cleaningkit}, returnExternalUrl: true});\r\n      var response    = https.get({url: suiteletURL, body: parameters});\r\n\r\n      log.debug('response from suitelet in Promotions.Extension.Model', response.body);\r\n      return JSON.parse(response.body);\r\n      * */\r\n\r\n      log.debug('response from Promotions.Extension.Model:get', JSON.stringify(response));\r\n      return response;\r\n    },\r\n\r\n    addDiscountItem: function () {\r\n\r\n    },\r\n\r\n    checkForPromotion: function checkForPromotion() {\r\n\r\n    },\r\n\r\n    addPromotion: function addPromotion(promotion) {\r\n      var ret = {};\r\n      try {\r\n        var dateObj = this.getFirstAndLastOfMonth();\r\n        var user    = runtime.getCurrentUser();\r\n        //var code       = promotion.promotioncode + \"_\" + user.id;\r\n\r\n        var promoRecord = record.create({type: record.Type.PROMOTION_CODE, isDynamic: true});\r\n        var newPromoID  = promoRecord.save();\r\n        var newPromo    = record.load({type: record.Type.PROMOTION_CODE, id: newPromoID, isDynamic: true})\r\n        newPromo.setValue({fieldId: 'name', value: promotion.code});\r\n        newPromo.setValue({fieldId: 'customform', value: promotion.formId}); //172 payment form\r\n        newPromo.setValue({fieldId: 'repeatdiscount', value: false});\r\n        newPromo.setValue({fieldId: 'whatthecustomerneedstobuy', value: 'ANYTHING'});\r\n        newPromo.setValue({fieldId: 'applydiscountto', value: 'FIRSTSALE'});\r\n        newPromo.setValue({fieldId: 'discount', value: promotion.discountId}); //2246\r\n        newPromo.setValue({fieldId: 'discounttype', value: promotion.type}); // percent or flat\r\n        newPromo.setValue({fieldId: 'rate', value: promotion.rate}); // string with percent or number\r\n        newPromo.setValue({fieldId: 'code', value: promotion.code});\r\n        newPromo.setValue({fieldId: 'description', value: 'Code for Cleaning Kit for ' + dateObj.month + ' ' + dateObj.year + ' for customer ' + user.name});\r\n        newPromo.setValue({fieldId: 'startdate', value: dateObj.firstDayOfMonth});\r\n        newPromo.setValue({fieldId: 'enddate', value: dateObj.lastDayOfMonth});\r\n        var updatedPromoID = newPromo.save();\r\n        var updatedPromo   = record.load({type: record.Type.PROMOTION_CODE, id: updatedPromoID, isDynamic: true});\r\n        updatedPromo.setValue({fieldId: 'audience', value: 'SPECIFICCUSTOMERS'});\r\n        updatedPromo.setValue({fieldId: 'customers', value: user.id.toString()});\r\n        updatedPromo.setValue({fieldId: 'saleschannels', value: 'ALL'});\r\n\r\n        ret = {\r\n          status  : 'OK',\r\n          response: {\r\n            promotionId: updatedPromoID,\r\n          }\r\n        }\r\n\r\n      } catch (e) {\r\n        nlapiLogExecution('ERROR', 'Error creating promotion code for customer', JSON.stringify(e));\r\n        var response           = {success: true, message: \"\", response_code: \"\"};\r\n        response.success       = false;\r\n        response.message       = \"There was a problem adding the promotion for this customer.\";\r\n        response.response_code = \"ERR_PROBLEM_ADDING_PROMOTION\";\r\n        return response;\r\n      }\r\n      return ret;\r\n    },\r\n\r\n    getPromotionEligibility: function getPromotionEligibility(user, promotion) {\r\n\r\n    },\r\n\r\n    getPromotionEligibilityCleaningKits: function getPromotionEligibilityCleaningKits(user) {\r\n      log.debug('getPromotionEligibilityCleaningKits: user', JSON.stringify(user));\r\n      var eligibilityFields = search.lookupFields({\r\n        type   : search.Type.CUSTOMER,\r\n        id     : user,\r\n        columns: ['custentity_hf_account_has_warranty', 'custentity_hf_number_warranties']\r\n      });\r\n      log.debug('getPromotionEligibilityCleaningKits', eligibilityFields)\r\n      var hasWarranty      = eligibilityFields['custentity_hf_account_has_warranty'];\r\n      var numberWarranties = eligibilityFields['custentity_hf_number_warranties'];\r\n      return {\r\n        hasWarranty       : hasWarranty\r\n        , numberWarranties: Number(numberWarranties)\r\n      }\r\n    },\r\n\r\n    searchForPromotion: function searchForPromotion(couponString, userId) {\r\n      /**\r\n       'custrecord_trv_promo_code', 'custrecord_trv_promo_number_uses', 'custrecord_trv_promo_type', 'custrecord_trv_promo_code_form', 'custrecord_trv_promo_disc_type',\r\n       'custrecord_trv_promo_amount_off', 'custrecord_trv_promo_code_discount_item'\r\n       **/\r\n\r\n      var dateObj    = this.getFirstAndLastOfMonth();\r\n      var promocodes = {};\r\n      log.debug('searchForPromotion', JSON.stringify(dateObj));\r\n\r\n      var promotionSearch = search.create({\r\n        type   : 'customrecord_trv_promotions',\r\n        columns: [\r\n          'custrecord_trv_promo_code', 'custrecord_trv_promo_number_uses', 'custrecord_trv_promo_type', 'custrecord_trv_promo_code_form', 'custrecord_trv_promo_disc_type', 'custrecord_trv_promo_amount_off',\r\n          'custrecord_trv_promo_code_discount_item', 'custrecord_allow_multiple_uses_same_orde', 'custrecord_trv_promo_qualifier', 'custrecord_qualifying_customer_ids', 'custrecord_trv_promo_excluded_customers',\r\n          'custrecord_trv_promo_excluded_cust_ids','custrecord_trv_promo_auto_apply'\r\n        ],\r\n        filters: [\r\n          ['isinactive', 'is', false],\r\n          'AND', ['custrecord_trv_promo_start_date', 'onorbefore', dateObj.firstDayOfMonthStr],\r\n          'AND', ['custrecord_trv_promo_end_date', 'onorafter', dateObj.lastDayOfMonthStr]\r\n        ]\r\n      });\r\n\r\n      var searchFilters = promotionSearch.filters;\r\n      if (couponString.length > 0) {\r\n        searchFilters.push('AND')\r\n        searchFilters.push(['custrecord_trv_promo_code', 'is', couponString])\r\n      }\r\n      promotionSearch.filters = searchFilters;\r\n\r\n      var self     = this;\r\n      var pageData = promotionSearch.runPaged();\r\n      pageData.pageRanges.forEach(function (pageRange) {\r\n        var page = pageData.fetch({index: pageRange.index});\r\n        page.data.forEach(function (result) {\r\n          var checkForEligibleCustomers = Number(result.getValue({name: 'custrecord_trv_promo_qualifier'}));\r\n          var eligibleCustomers         = result.getValue({name: 'custrecord_qualifying_customer_ids'});\r\n\r\n          var checkForExcludedCustomers = Number(result.getValue({name: 'custrecord_trv_promo_excluded_customers'}));\r\n          var excludedCustomers         = result.getValue({name: 'custrecord_trv_promo_excluded_cust_ids'});\r\n          log.debug('checkForEligibleCustomers: ' + checkForEligibleCustomers, eligibleCustomers)\r\n          log.debug('checkForExcludedCustomers: ' + checkForExcludedCustomers, excludedCustomers)\r\n\r\n          var isEligible = checkForEligibleCustomers > 0 ? eligibleCustomers.indexOf(userId.toString()) > -1 : true;\r\n          var isExcluded = checkForExcludedCustomers > 0 ? excludedCustomers.indexOf(userId.toString()) > -1 : false;\r\n\r\n          log.debug(result.getValue({name: 'custrecord_trv_promo_code'}) + ' isEligible: ' + isEligible, 'userId: ' + userId + 'isExcluded: ' + isExcluded)\r\n\r\n          if (isEligible && !isExcluded) {\r\n            promocodes[result.id]                     = {}\r\n            promocodes[result.id].promocode           = result.getValue({name: 'custrecord_trv_promo_code'});\r\n            promocodes[result.id].internalid          = Number(result.id);\r\n            promocodes[result.id].type                = Number(result.getValue({name: 'custrecord_trv_promo_type'})); // 1: cleaning kit, 2: single, 3 multiple use\r\n            promocodes[result.id].numberUses          = Number(result.getValue({name: 'custrecord_trv_promo_number_uses'}));\r\n            promocodes[result.id].eligibility         = ''; //todo build eligiblity\r\n            promocodes[result.id].discountId          = result.getValue({name: 'custrecord_trv_promo_code_discount_item'});\r\n            promocodes[result.id].formId              = result.getValue({name: 'custrecord_trv_promo_code_form'});\r\n            promocodes[result.id].discountType        = Number(result.getValue({name: 'custrecord_trv_promo_disc_type'})); // 1: flat rate, 2: percentage off, 3: free with purhcase\r\n            promocodes[result.id].rate                = result.getValue({name: 'custrecord_trv_promo_amount_off_formatte'});\r\n            promocodes[result.id].qualifyingItems     = self.getQualifyingItems(result.id);\r\n            promocodes[result.id].itemsToAdd          = self.getFreeItems(result.id);\r\n            promocodes[result.id].multipleOnSameOrder = result.getValue({name: 'custrecord_allow_multiple_uses_same_orde'});\r\n            promocodes[result.id].autoApply           = result.getValue({name: 'custrecord_trv_promo_auto_apply'});\r\n          }\r\n          return true;\r\n        });\r\n      });\r\n\r\n      log.debug('searchForPromotion: promocodes', JSON.stringify(promocodes));\r\n      return promocodes;\r\n    },\r\n\r\n    getQualifyingItems: function getQualifyingItems(promotionID) {\r\n      var qualifyingItems = {\r\n        type      : 'all',\r\n        items     : [],\r\n        quantifier: 'is'\r\n      };\r\n\r\n      search.create({\r\n        type   : 'customrecord_trv_promo_qualifiers',\r\n        columns: ['custrecord_trv_promo_qualifier_item', 'custrecord_trv_promo_qualifier_qty'],\r\n        filters: [\r\n          ['isinactive', 'is', false], 'AND', ['custrecord_trv_promo_qualifier_promo', 'anyof', [promotionID]]\r\n        ]\r\n      }).run().each(function (result) {\r\n        var qualifier = {\r\n          itemIds           : result.getValue('custrecord_trv_promo_qualifier_item').split(','), // array of objects value, text\r\n          quantityToPurchase: Number(result.getValue('custrecord_trv_promo_qualifier_qty')),\r\n          isOr              : result.getValue('custrecord_trv_promo_qualifier_item').length > 0\r\n        }\r\n        if (qualifier.isOr) {\r\n          qualifyingItems.quantifier = 'any'\r\n        }\r\n        qualifyingItems.items.push(qualifier);\r\n        return true;\r\n      });\r\n\r\n      if (qualifyingItems.items.length > 0) {\r\n        qualifyingItems.type = qualifyingItems.items.length === 1 ? 'single' : 'multiple';\r\n      }\r\n\r\n      log.debug('searchForPromotion: getQualifyingItems', JSON.stringify(qualifyingItems));\r\n      return qualifyingItems;\r\n    },\r\n\r\n    getFreeItems: function (promotionID) {\r\n      var itemsToAdd = {\r\n        type      : 'all', //todo: support for picking from list - probably set at parent?\r\n        items     : [],\r\n        quantifier: 'is'\r\n      };\r\n      var itemSearch = search.create({\r\n        type   : 'customrecord_trv_promo_free_items',\r\n        columns: ['custrecord_trv_promo_free_item_item', 'custrecord_trv_promo_free_item_quantity'],\r\n        filters: [\r\n          ['isinactive', 'is', false], 'AND', ['custrecord_trv_promo_free_item_promotion', 'anyof', [promotionID]]\r\n        ]\r\n      });\r\n\r\n      itemSearch.run().each(function (result) {\r\n        itemsToAdd.items.push({\r\n          itemId       : result.getValue('custrecord_trv_promo_free_item_item'),\r\n          quantityToAdd: result.getValue('custrecord_trv_promo_free_item_quantity'),\r\n        })\r\n        return true;\r\n      });\r\n\r\n      log.debug('searchForPromotion: getFreeItems', JSON.stringify(itemsToAdd));\r\n      return itemsToAdd;\r\n    },\r\n\r\n    searchForRedemption: function searchForRedemption(relatedPromocodeID, user) {\r\n      var response        = {relatedPromocodeID: relatedPromocodeID, numberClaimed: 0, canClaim: false}\r\n      var promotionSearch = search.create({\r\n        type   : 'customrecord_promotion_redemption',\r\n        columns: [search.createColumn({name: 'custrecord_trv_promo_redemption_qty', summary: search.Summary.SUM})],\r\n        filters: [\r\n          ['isinactive', 'is', false],\r\n          'AND', ['custrecord_trv_promo_redemption_promo', 'is', relatedPromocodeID],\r\n          'AND', ['custrecord_trv_promo_redemption_cust', 'is', user.id]\r\n        ]\r\n      });\r\n\r\n      var pageData = promotionSearch.runPaged();\r\n      pageData.pageRanges.forEach(function (pageRange) {\r\n        var page = pageData.fetch({index: pageRange.index});\r\n        page.data.forEach(function (result) {\r\n          response.numberClaimed = Number(result.getValue({name: 'custrecord_trv_promo_redemption_qty', summary: search.Summary.SUM}))\r\n          return true;\r\n        });\r\n      });\r\n\r\n      return response;\r\n    },\r\n\r\n    getFirstAndLastOfMonth: function getFirstAndLastOfMonth() {\r\n      var date               = new Date();\r\n      var reportingDateDate  = format.parse({value: date, type: format.Type.DATE});\r\n      var now                = new Date(reportingDateDate);\r\n      var firstDayOfMonthStr = (now.getMonth() + 1).toString() + '/1/' + now.getFullYear();\r\n      var firstDayOfMonth    = new Date(firstDayOfMonthStr);\r\n      var lastDayOfMonth     = new Date(now.getFullYear(), now.getMonth() + 1, 0);\r\n      var lastDayOfMonthStr  = (now.getMonth() + 1).toString() + '/' + lastDayOfMonth.getDate() + '/' + now.getFullYear();\r\n      return {\r\n        firstDayOfMonthStr: firstDayOfMonthStr,\r\n        firstDayOfMonth   : firstDayOfMonth,\r\n        lastDayOfMonthStr : lastDayOfMonthStr,\r\n        lastDayOfMonth    : lastDayOfMonth,\r\n        year              : now.getFullYear(),\r\n        year2Digits       : now.getFullYear().toString().substring(2),\r\n        month             : monthNames[now.getMonth()],\r\n        monthAbbr         : monthAbbr[now.getMonth()]\r\n      }\r\n    },\r\n\r\n    isLoggedIn: function isLoggedIn() {\r\n      var user = runtime.getCurrentUser();\r\n      return user.id > 0 && user.role !== 17\r\n    }\r\n  }\r\n\r\n  return PromotionsHandler;\r\n})\r\n"},{"path":"\\Trevera\\TreveraPromotions@1.0.0\\Modules\\Extension\\SuiteScript2\\Promotions.Extension.Service.ss","type":null,"contents":"/**\r\n * @NApiVersion 2.x\r\n * @NModuleScope Public\r\n */\r\ndefine(['N/runtime', './Promotions.Extension.Model'], function (runtime, Model) {\r\n  \"use strict\";\r\n\r\n  function isLoggedIn() {\r\n    var user = runtime.getCurrentUser();\r\n    return user.id > 0 && user.role !== 17\r\n  }\r\n\r\n  function service(ctx) {\r\n    var response = {};\r\n    if (isLoggedIn()) {\r\n      switch (ctx.request.method) {\r\n        case 'GET':\r\n          var action = ctx.request.parameters.action;\r\n          if (action && action.length > 0) {\r\n            // handle actions\r\n            switch (action) {\r\n              case 'addPromotion':\r\n                response = Model.addPromotion(ctx.request);\r\n                break;\r\n              default:\r\n                response = {\r\n                  type   : 'error',\r\n                  message: 'Action not defined'\r\n                }\r\n                break;\r\n            }\r\n          }\r\n          else {\r\n            response = Model.getPromotions(ctx.request)\r\n          }\r\n          break;\r\n        default:\r\n          response = {\r\n            type   : 'error',\r\n            message: 'Method not supported: ' + ctx.request.method\r\n          };\r\n      }\r\n    }\r\n    else {\r\n      response = {\r\n        type   : 'error',\r\n        message: 'You must be logged in to use this service'\r\n      }\r\n    }\r\n\r\n    ctx.response.write(JSON.stringify(response));\r\n  }\r\n\r\n  return {\r\n    service: service\r\n  };\r\n});\r\n"},{"path":"\\Trevera\\TreveraPromotions@1.0.0\\Modules\\Extension\\Templates\\trevera_promotions_extension.tpl","type":"application/vnd.groove-tool-template","contents":"<div class=\"content-cleaning-kit-landing\">\r\n    <div id=\"promotions_cleaning_kit_landing\" data-cms-area=\"promotions_cleaning_kit_landing\" data-cms-area-filters=\"path\"></div>\r\n    {{#if isLoggedIn}}\r\n        <div data-view=\"promocode-message-placeholder\"><p>We're adding your cleaning kit now...</p></div>\r\n    {{else}}\r\n        <a href=\"https://hydrafacial.scastaging.com/sca-dev-2021-1-0/checkout.ssp?is=login&login=T&origin=home&origin_hash=cleaningkits\">Please Login to Claim Your Cleaning Kit</a>\r\n    {{/if}}\r\n</div>\r\n"}],"deployment_time":1635443221883}