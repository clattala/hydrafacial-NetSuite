/**
 * @NApiVersion 2.1
 * @author Shelby Severin <shelby.severin@trevera.com>
 * @NModuleScope Public
 * @NScriptName Trevera | Update Customers
 * @NScriptType MapReduceScript
 */
define(["N/log", "N/record", "N/search"], function (log, record, search) {
    var exports = {};
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.reduce = exports.map = exports.getInputData = void 0;
    exports.getInputData = function (ctx) {
        var customers = ["C018186", "C018984", "C019941", "C014614", "C014570", "C010040", "C018327", "C015745", "C020712", "C017670", "C017448", "C018061", "C017632", "C016535", "C015995", "C019577",
            "C016568", "C012936", "C017216", "C012382", "C014734", "C020072", "C015827", "C022385", "C013337", "C013422", "C016770", "C012656", "C010099", "C017489", "C018908", "C014754",
            "C018447", "C017375", "C017690", "C018783", "C016613", "C018694", "C018410", "C017881", "C021962", "C013497", "C011823", "C016782", "C013390", "C014067", "C013340", "C017121",
            "C015523", "C021297", "C018348", "C010171", "C011673", "C016407", "C012094", "C021858", "C016023", "C017974", "C014519", "C010211", "C010210", "C018006", "C014093", "C021840",
            "C010214", "C018698", "C022481", "C020433", "C020046", "C013580", "C010224", "C011952", "C019281", "C012304", "C021899", "C016119", "C022445", "C014518", "C014825", "C021732",
            "C012258", "C016212", "C019991", "C018616", "C022530", "C014360", "C010840", "C013571", "C014199", "C020927", "C016821", "C021906", "C015120", "C013661", "C010273", "C013948",
            "C010286", "C020743", "C016990", "C021806", "C019478", "C014471", "C018079", "C017193", "C021216", "C013307", "C021377", "C020929", "C021091", "C021494", "C013287", "C020012",
            "C012489", "C016475", "C015831", "C015697", "C017695", "C010375", "C017818", "C014218", "C015943", "C016259", "C018814", "C016236", "C010393", "C013330", "C021500", "C013744",
            "C018386", "C017816", "C017124", "C015693", "C020176", "C012220", "C010645", "C021832", "C014860", "C019831", "C016771", "C014069", "C016673", "C018735", "C018790", "C013358",
            "C017681", "C016092", "C017954", "C017013", "C017519", "C011988", "C015941", "C016861", "C019263", "C016002", "C013279", "C017637", "C016704", "C019687", "C021552", "C021444",
            "C017569", "C015569", "C019429", "C017278", "C019644", "C017223", "C012627", "C021391", "C021560", "C013494", "C015723", "C017437", "C020009", "C016488", "C017117", "C013943",
            "C016595", "C011897", "C014210", "C021081", "C019267", "C018383", "C017205", "C020787", "C015839", "C016987", "C017170", "C021149", "C012133", "C011734", "C010564", "C010565",
            "C015887", "C019316", "C022147", "C013605", "C016381", "C020201", "C016675", "C021342", "C015983", "C017473", "C015833", "C020369", "C014261", "C016745", "C016176", "C016124",
            "C019132", "C016095", "C015824", "C010682", "C010683", "C015546", "C017065", "C013608", "C017675", "C022321", "C011141", "C017786", "C018203", "C018193", "C015698", "C018682",
            "C015313", "C017532", "C012704", "C013704", "C014630", "C013272", "C010755", "C021443", "C020678", "C012740", "C015795", "C016320", "C018426", "C020225", "C018130", "C011611",
            "C011549", "C011316", "C014278", "C010793", "C018670", "C021658", "C010802", "C018092", "C018607", "C022025", "C014132", "C014848", "C017362", "C010825", "C016944", "C019810",
            "C017419", "C021553", "C014676", "C019631", "C021401", "C016920", "C013086", "C018937", "C016775", "C010890", "C015260", "C017345", "C011700", "C019927", "C014601", "C017886",
            "C017054", "C011674", "C021769", "C018617", "C013776", "C016061", "C014194", "C015782", "C018928", "C021951", "C021674", "C014103", "C017014", "C010960", "C010961", "C011796",
            "C010818", "C020240", "C016482", "C016321", "C017046", "C019598", "C015041", "C021913", "C017435", "C015689", "C020977", "C013418", "C020981", "C016766", "C019148", "C011050",
            "C011013", "C010295", "C020395", "C015816", "C014645", "C020594", "C013717", "C015906", "C014705", "C017155", "C016578", "C014979", "C012768", "C021897", "C016135", "C017484",
            "C016973", "C016255", "C019731", "C014762", "C022258", "C016068", "C013784", "C021266", "C021238", "C015766", "C011841", "C014074", "C013923", "C013392", "C014322", "C014822",
            "C018816", "C020267", "C019041", "C019819", "C018075", "C020546", "C020269", "C016549", "C014390", "C017060", "C014104", "C018802", "C011156", "C017953", "C020371", "C013273",
            "C012714", "C020011", "C019654", "C015646", "C017174", "C011202", "C014786", "C014037", "C017337", "C017755", "C013401", "C013868", "C021896", "C019677", "C016820", "C018748",
            "C017625", "C017055", "C017567", "C017928", "C016361", "C010623", "C021565", "C013689", "C017684", "C016899", "C017525", "C016114", "C013730", "C011262", "C011267", "C012833",
            "C013985", "C011269", "C012771", "C012928", "C018589", "C013167", "C017122", "C018208", "C019800", "C018652", "C014055", "C020211", "C013588", "C020729", "C016194", "C019951",
            "C014277", "C014487", "C020872", "C012118", "C012261", "C018823", "C017970", "C013539", "C013247", "C011348", "C014812", "C016005", "C017273", "C017443", "C017408", "C018951",
            "C021025", "C011792", "C021672", "C016387", "C018614", "C012926", "C016585", "C014206", "C020229", "C018297", "C017035", "C012562", "C013500", "C020095", "C022011", "C019635",
            "C011427", "C011437", "C017812", "C021000", "C022285", "C013517", "C021699", "C013691", "C014541", "C016045", "C015893", "C014607", "C017864", "C022430", "C017501", "C019739",
            "C018760", "C017237", "C017238", "C019837", "C018275", "C016178", "C013347", "C011535", "C013736", "C012622", "C014190", "C011543", "C017004", "C021264", "C016081", "C019944",
            "C011567", "C016116", "C021609", "C012617", "C018635", "C016733", "C019665", "C022329", "C022375", "C011495", "C019936", "C017207", "C017208", "C016924", "C016945", "C019589",
            "C016667", "C012611", "C015282", "C013706", "C015762", "C012395", "C013863", "C014294", "C020715", "C012299", "C016941", "C016138", "C014600", "C020756", "C017283", "C014253",
            "C022075", "C015944", "C019708", "C019273", "C017275", "C011578", "C014556", "C010037", "C016440", "C019733", "C017312", "C014432", "C018376", "C017370", "C011982", "C018356",
            "C014624", "C014532", "C019981", "C019867", "C013017", "C020208", "C021017", "C015222", "C015710", "C011637", "C014111", "C011820", "C021912", "C017071", "C016103", "C017769",
            "C012349", "C019420", "C022471", "C017450", "C014573", "C020295", "C017712", "C013862", "C013666", "C012244", "C019573", "C015301", "C021009", "C019403", "C016648", "C020532",
            "C022559", "C011712", "C017894"
        ];
        log.audit('customers count', customers.length);
        return customers;
    };
    exports.map = function (ctx) {
        try { // get all the lines for the order and write it to the values
            var valueObj = {
                'entityid': ctx.value,
                'customerID': 0
            };
            log.debug('valueObj', valueObj);
            var custSearch = search.create({
                type: search.Type.CUSTOMER,
                filters: [
                    search.createFilter({ name: 'entityid', operator: search.Operator.STARTSWITH, values: ctx.value + " " })
                ]
            });
            var result = custSearch.run().getRange({ start: 0, end: 1 });
            log.debug('result', result);
            if (result.length == 1) {
                valueObj['customerID'] = Number(result[0].id);
            }
            ctx.write(ctx.key, JSON.stringify(valueObj));
        }
        catch (e) {
            log.error('map fn error', e);
        }
    };
    exports.reduce = function (ctx) {
        var valueObjs = ctx.values;
        log.debug('valueObjs', valueObjs);
        valueObjs.forEach(function (val) {
            var mapObj = JSON.parse(val);
            try {
                var submitted = record.submitFields({
                    type: record.Type.CUSTOMER,
                    id: mapObj.customerID,
                    values: {
                        'custentity_hf_has_multiple_machines': true
                    }
                });
                log.debug('submitted', submitted);
            }
            catch (e) {
                log.error('error adding key', e);
            }
        });
        ctx.write(ctx.key, JSON.stringify(ctx.values));
    };
    return exports;
});
